// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
package com.ppdai.framework.raptor.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;

public final class ProtoAdapter_AllTypes
        extends ProtoAdapter<AllTypes>
{
  private final ProtoAdapter<Map<Integer, Integer>> map_int32_int32 = ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32);

  private final ProtoAdapter<Map<String, String>> map_string_string = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

  private final ProtoAdapter<Map<String, AllTypes.NestedMessage>> map_string_message = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, AllTypes.NestedMessage.ADAPTER);

  private final ProtoAdapter<Map<String, AllTypes.NestedEnum>> map_string_enum = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, AllTypes.NestedEnum.ADAPTER);

  public ProtoAdapter_AllTypes() {
    super(FieldEncoding.LENGTH_DELIMITED, AllTypes.class);
  }

  public int encodedSize(AllTypes value) {
    return ProtoAdapter.INT32.encodedSizeWithTag(1, value.getInt32())
        + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.getUint32())
        + ProtoAdapter.SINT32.encodedSizeWithTag(3, value.getSint32())
        + ProtoAdapter.FIXED32.encodedSizeWithTag(4, value.getFixed32())
        + ProtoAdapter.SFIXED32.encodedSizeWithTag(5, value.getSfixed32())
        + ProtoAdapter.INT64.encodedSizeWithTag(6, value.getInt64())
        + ProtoAdapter.UINT64.encodedSizeWithTag(7, value.getUint64())
        + ProtoAdapter.SINT64.encodedSizeWithTag(8, value.getSint64())
        + ProtoAdapter.FIXED64.encodedSizeWithTag(9, value.getFixed64())
        + ProtoAdapter.SFIXED64.encodedSizeWithTag(10, value.getSfixed64())
        + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.getBool())
        + ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.getFloat_())
        + ProtoAdapter.DOUBLE.encodedSizeWithTag(13, value.getDouble_())
        + ProtoAdapter.STRING.encodedSizeWithTag(14, value.getString())
        + ProtoAdapter.BYTES.encodedSizeWithTag(15, value.getBytes())
        + AllTypes.NestedEnum.ADAPTER.encodedSizeWithTag(16, value.getNestedEnum())
        + AllTypes.NestedMessage.ADAPTER.encodedSizeWithTag(17, value.getNestedMessage())
        + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.getRepInt32())
        + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.getRepUint32())
        + ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.getRepSint32())
        + ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.getRepFixed32())
        + ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.getRepSfixed32())
        + ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.getRepInt64())
        + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.getRepUint64())
        + ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.getRepSint64())
        + ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.getRepFixed64())
        + ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.getRepSfixed64())
        + ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.getRepBool())
        + ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.getRepFloat())
        + ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.getRepDouble())
        + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.getRepString())
        + ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.getRepBytes())
        + AllTypes.NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.getRepNestedEnum())
        + AllTypes.NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.getRepNestedMessage())
        + map_int32_int32.encodedSizeWithTag(501, value.getMapInt32Int32())
        + map_string_string.encodedSizeWithTag(502, value.getMapStringString())
        + map_string_message.encodedSizeWithTag(503, value.getMapStringMessage())
        + map_string_enum.encodedSizeWithTag(504, value.getMapStringEnum());
  }

  public void encode(ProtoWriter writer, AllTypes value) throws IOException {
    ProtoAdapter.INT32.encodeWithTag(writer, 1, value.getInt32());
    ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.getUint32());
    ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.getSint32());
    ProtoAdapter.FIXED32.encodeWithTag(writer, 4, value.getFixed32());
    ProtoAdapter.SFIXED32.encodeWithTag(writer, 5, value.getSfixed32());
    ProtoAdapter.INT64.encodeWithTag(writer, 6, value.getInt64());
    ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.getUint64());
    ProtoAdapter.SINT64.encodeWithTag(writer, 8, value.getSint64());
    ProtoAdapter.FIXED64.encodeWithTag(writer, 9, value.getFixed64());
    ProtoAdapter.SFIXED64.encodeWithTag(writer, 10, value.getSfixed64());
    ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.getBool());
    ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.getFloat_());
    ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.getDouble_());
    ProtoAdapter.STRING.encodeWithTag(writer, 14, value.getString());
    ProtoAdapter.BYTES.encodeWithTag(writer, 15, value.getBytes());
    AllTypes.NestedEnum.ADAPTER.encodeWithTag(writer, 16, value.getNestedEnum());
    AllTypes.NestedMessage.ADAPTER.encodeWithTag(writer, 17, value.getNestedMessage());
    ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.getRepInt32());
    ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.getRepUint32());
    ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.getRepSint32());
    ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.getRepFixed32());
    ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.getRepSfixed32());
    ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.getRepInt64());
    ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.getRepUint64());
    ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.getRepSint64());
    ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.getRepFixed64());
    ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.getRepSfixed64());
    ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.getRepBool());
    ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.getRepFloat());
    ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.getRepDouble());
    ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.getRepString());
    ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.getRepBytes());
    AllTypes.NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.getRepNestedEnum());
    AllTypes.NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.getRepNestedMessage());
    map_int32_int32.encodeWithTag(writer, 501, value.getMapInt32Int32());
    map_string_string.encodeWithTag(writer, 502, value.getMapStringString());
    map_string_message.encodeWithTag(writer, 503, value.getMapStringMessage());
    map_string_enum.encodeWithTag(writer, 504, value.getMapStringEnum());
  }

  public AllTypes decode(ProtoReader reader) throws IOException {
    AllTypes result = new AllTypes();
    long token = reader.beginMessage();
    for (int tag; (tag = reader.nextTag()) != -1;) {
      switch (tag) {
        case 1: result.setInt32(ProtoAdapter.INT32.decode(reader)); break;
        case 2: result.setUint32(ProtoAdapter.UINT32.decode(reader)); break;
        case 3: result.setSint32(ProtoAdapter.SINT32.decode(reader)); break;
        case 4: result.setFixed32(ProtoAdapter.FIXED32.decode(reader)); break;
        case 5: result.setSfixed32(ProtoAdapter.SFIXED32.decode(reader)); break;
        case 6: result.setInt64(ProtoAdapter.INT64.decode(reader)); break;
        case 7: result.setUint64(ProtoAdapter.UINT64.decode(reader)); break;
        case 8: result.setSint64(ProtoAdapter.SINT64.decode(reader)); break;
        case 9: result.setFixed64(ProtoAdapter.FIXED64.decode(reader)); break;
        case 10: result.setSfixed64(ProtoAdapter.SFIXED64.decode(reader)); break;
        case 11: result.setBool(ProtoAdapter.BOOL.decode(reader)); break;
        case 12: result.setFloat_(ProtoAdapter.FLOAT.decode(reader)); break;
        case 13: result.setDouble_(ProtoAdapter.DOUBLE.decode(reader)); break;
        case 14: result.setString(ProtoAdapter.STRING.decode(reader)); break;
        case 15: result.setBytes(ProtoAdapter.BYTES.decode(reader)); break;
        case 16: {
          try {
            result.setNestedEnum(AllTypes.NestedEnum.ADAPTER.decode(reader));
          } catch (ProtoAdapter.EnumConstantNotFoundException e) {
          }
          break;
        }
        case 17: result.setNestedMessage(AllTypes.NestedMessage.ADAPTER.decode(reader)); break;
        case 201: result.getRepInt32().add(ProtoAdapter.INT32.decode(reader)); break;
        case 202: result.getRepUint32().add(ProtoAdapter.UINT32.decode(reader)); break;
        case 203: result.getRepSint32().add(ProtoAdapter.SINT32.decode(reader)); break;
        case 204: result.getRepFixed32().add(ProtoAdapter.FIXED32.decode(reader)); break;
        case 205: result.getRepSfixed32().add(ProtoAdapter.SFIXED32.decode(reader)); break;
        case 206: result.getRepInt64().add(ProtoAdapter.INT64.decode(reader)); break;
        case 207: result.getRepUint64().add(ProtoAdapter.UINT64.decode(reader)); break;
        case 208: result.getRepSint64().add(ProtoAdapter.SINT64.decode(reader)); break;
        case 209: result.getRepFixed64().add(ProtoAdapter.FIXED64.decode(reader)); break;
        case 210: result.getRepSfixed64().add(ProtoAdapter.SFIXED64.decode(reader)); break;
        case 211: result.getRepBool().add(ProtoAdapter.BOOL.decode(reader)); break;
        case 212: result.getRepFloat().add(ProtoAdapter.FLOAT.decode(reader)); break;
        case 213: result.getRepDouble().add(ProtoAdapter.DOUBLE.decode(reader)); break;
        case 214: result.getRepString().add(ProtoAdapter.STRING.decode(reader)); break;
        case 215: result.getRepBytes().add(ProtoAdapter.BYTES.decode(reader)); break;
        case 216: {
          try {
            result.getRepNestedEnum().add(AllTypes.NestedEnum.ADAPTER.decode(reader));
          } catch (ProtoAdapter.EnumConstantNotFoundException e) {
          }
          break;
        }
        case 217: result.getRepNestedMessage().add(AllTypes.NestedMessage.ADAPTER.decode(reader)); break;
        case 501: result.getMapInt32Int32().putAll(map_int32_int32.decode(reader)); break;
        case 502: result.getMapStringString().putAll(map_string_string.decode(reader)); break;
        case 503: result.getMapStringMessage().putAll(map_string_message.decode(reader)); break;
        case 504: result.getMapStringEnum().putAll(map_string_enum.decode(reader)); break;
      }
    }
    reader.endMessage(token);
    return result;
  }
}
