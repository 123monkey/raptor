// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
package com.ppdai.framework.raptor.proto;

import com.google.protobuf.WireFormat;
import com.ppdai.framework.raptor.annotation.RaptorField;
import com.ppdai.framework.raptor.annotation.RaptorMessage;
import com.squareup.wire.EnumAdapter;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okio.ByteString;

@RaptorMessage(
    protoFile = "all_types"
)
public final class AllTypes {
  public static final ProtoAdapter<AllTypes> ADAPTER = new ProtoAdapter_AllTypes();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_INT32 = 0;

  public static final Integer DEFAULT_UINT32 = 0;

  public static final Integer DEFAULT_SINT32 = 0;

  public static final Integer DEFAULT_FIXED32 = 0;

  public static final Integer DEFAULT_SFIXED32 = 0;

  public static final Long DEFAULT_INT64 = 0L;

  public static final Long DEFAULT_UINT64 = 0L;

  public static final Long DEFAULT_SINT64 = 0L;

  public static final Long DEFAULT_FIXED64 = 0L;

  public static final Long DEFAULT_SFIXED64 = 0L;

  public static final Boolean DEFAULT_BOOL = false;

  public static final Float DEFAULT_FLOAT_ = 0.0f;

  public static final Double DEFAULT_DOUBLE_ = 0.0d;

  public static final String DEFAULT_STRING = "";

  public static final ByteString DEFAULT_BYTES = ByteString.EMPTY;

  public static final NestedEnum DEFAULT_NESTEDENUM = NestedEnum.A;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      order = 1,
      name = "int32"
  )
  private Integer int32;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT32,
      order = 2,
      name = "uint32"
  )
  private Integer uint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT32,
      order = 3,
      name = "sint32"
  )
  private Integer sint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED32,
      order = 4,
      name = "fixed32"
  )
  private Integer fixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED32,
      order = 5,
      name = "sfixed32"
  )
  private Integer sfixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT64,
      order = 6,
      name = "int64"
  )
  private Long int64;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT64,
      order = 7,
      name = "uint64"
  )
  private Long uint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT64,
      order = 8,
      name = "sint64"
  )
  private Long sint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED64,
      order = 9,
      name = "fixed64"
  )
  private Long fixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED64,
      order = 10,
      name = "sfixed64"
  )
  private Long sfixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.BOOL,
      order = 11,
      name = "bool"
  )
  private Boolean bool;

  @RaptorField(
      fieldType = WireFormat.FieldType.FLOAT,
      order = 12,
      name = "float"
  )
  private Float float_;

  @RaptorField(
      fieldType = WireFormat.FieldType.DOUBLE,
      order = 13,
      name = "double"
  )
  private Double double_;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      order = 14,
      name = "string"
  )
  private String string;

  @RaptorField(
      fieldType = WireFormat.FieldType.BYTES,
      order = 15,
      name = "bytes"
  )
  private ByteString bytes;

  @RaptorField(
      fieldType = WireFormat.FieldType.ENUM,
      order = 16,
      name = "nested_enum"
  )
  private NestedEnum nestedEnum;

  @RaptorField(
      fieldType = WireFormat.FieldType.MESSAGE,
      order = 17,
      name = "nested_message"
  )
  private NestedMessage nestedMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      order = 201,
      name = "rep_int32",
      repeated = true
  )
  private List<Integer> repInt32;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT32,
      order = 202,
      name = "rep_uint32",
      repeated = true
  )
  private List<Integer> repUint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT32,
      order = 203,
      name = "rep_sint32",
      repeated = true
  )
  private List<Integer> repSint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED32,
      order = 204,
      name = "rep_fixed32",
      repeated = true
  )
  private List<Integer> repFixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED32,
      order = 205,
      name = "rep_sfixed32",
      repeated = true
  )
  private List<Integer> repSfixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT64,
      order = 206,
      name = "rep_int64",
      repeated = true
  )
  private List<Long> repInt64;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT64,
      order = 207,
      name = "rep_uint64",
      repeated = true
  )
  private List<Long> repUint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT64,
      order = 208,
      name = "rep_sint64",
      repeated = true
  )
  private List<Long> repSint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED64,
      order = 209,
      name = "rep_fixed64",
      repeated = true
  )
  private List<Long> repFixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED64,
      order = 210,
      name = "rep_sfixed64",
      repeated = true
  )
  private List<Long> repSfixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.BOOL,
      order = 211,
      name = "rep_bool",
      repeated = true
  )
  private List<Boolean> repBool;

  @RaptorField(
      fieldType = WireFormat.FieldType.FLOAT,
      order = 212,
      name = "rep_float",
      repeated = true
  )
  private List<Float> repFloat;

  @RaptorField(
      fieldType = WireFormat.FieldType.DOUBLE,
      order = 213,
      name = "rep_double",
      repeated = true
  )
  private List<Double> repDouble;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      order = 214,
      name = "rep_string",
      repeated = true
  )
  private List<String> repString;

  @RaptorField(
      fieldType = WireFormat.FieldType.BYTES,
      order = 215,
      name = "rep_bytes",
      repeated = true
  )
  private List<ByteString> repBytes;

  @RaptorField(
      fieldType = WireFormat.FieldType.ENUM,
      order = 216,
      name = "rep_nested_enum",
      repeated = true
  )
  private List<NestedEnum> repNestedEnum;

  @RaptorField(
      fieldType = WireFormat.FieldType.MESSAGE,
      order = 217,
      name = "rep_nested_message",
      repeated = true
  )
  private List<NestedMessage> repNestedMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      keyType = WireFormat.FieldType.INT32,
      order = 501,
      name = "map_int32_int32",
      isMap = true
  )
  private Map<Integer, Integer> mapInt32Int32;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 502,
      name = "map_string_string",
      isMap = true
  )
  private Map<String, String> mapStringString;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 503,
      name = "map_string_message",
      isMap = true
  )
  private Map<String, NestedMessage> mapStringMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 504,
      name = "map_string_enum",
      isMap = true
  )
  private Map<String, NestedEnum> mapStringEnum;

  public Integer getInt32() {
    return this.int32;
  }

  public void setInt32(Integer int32) {
    this.int32=int32;
  }

  public Integer getUint32() {
    return this.uint32;
  }

  public void setUint32(Integer uint32) {
    this.uint32=uint32;
  }

  public Integer getSint32() {
    return this.sint32;
  }

  public void setSint32(Integer sint32) {
    this.sint32=sint32;
  }

  public Integer getFixed32() {
    return this.fixed32;
  }

  public void setFixed32(Integer fixed32) {
    this.fixed32=fixed32;
  }

  public Integer getSfixed32() {
    return this.sfixed32;
  }

  public void setSfixed32(Integer sfixed32) {
    this.sfixed32=sfixed32;
  }

  public Long getInt64() {
    return this.int64;
  }

  public void setInt64(Long int64) {
    this.int64=int64;
  }

  public Long getUint64() {
    return this.uint64;
  }

  public void setUint64(Long uint64) {
    this.uint64=uint64;
  }

  public Long getSint64() {
    return this.sint64;
  }

  public void setSint64(Long sint64) {
    this.sint64=sint64;
  }

  public Long getFixed64() {
    return this.fixed64;
  }

  public void setFixed64(Long fixed64) {
    this.fixed64=fixed64;
  }

  public Long getSfixed64() {
    return this.sfixed64;
  }

  public void setSfixed64(Long sfixed64) {
    this.sfixed64=sfixed64;
  }

  public Boolean getBool() {
    return this.bool;
  }

  public void setBool(Boolean bool) {
    this.bool=bool;
  }

  public Float getFloat_() {
    return this.float_;
  }

  public void setFloat_(Float float_) {
    this.float_=float_;
  }

  public Double getDouble_() {
    return this.double_;
  }

  public void setDouble_(Double double_) {
    this.double_=double_;
  }

  public String getString() {
    return this.string;
  }

  public void setString(String string) {
    this.string=string;
  }

  public ByteString getBytes() {
    return this.bytes;
  }

  public void setBytes(ByteString bytes) {
    this.bytes=bytes;
  }

  public NestedEnum getNestedEnum() {
    return this.nestedEnum;
  }

  public void setNestedEnum(NestedEnum nestedEnum) {
    this.nestedEnum=nestedEnum;
  }

  public NestedMessage getNestedMessage() {
    return this.nestedMessage;
  }

  public void setNestedMessage(NestedMessage nestedMessage) {
    this.nestedMessage=nestedMessage;
  }

  public List<Integer> getRepInt32() {
    if(this.repInt32 == null){this.repInt32 = new ArrayList();};
    return this.repInt32;
  }

  public void setRepInt32(List<Integer> repInt32) {
    this.repInt32=repInt32;
  }

  public List<Integer> getRepUint32() {
    if(this.repUint32 == null){this.repUint32 = new ArrayList();};
    return this.repUint32;
  }

  public void setRepUint32(List<Integer> repUint32) {
    this.repUint32=repUint32;
  }

  public List<Integer> getRepSint32() {
    if(this.repSint32 == null){this.repSint32 = new ArrayList();};
    return this.repSint32;
  }

  public void setRepSint32(List<Integer> repSint32) {
    this.repSint32=repSint32;
  }

  public List<Integer> getRepFixed32() {
    if(this.repFixed32 == null){this.repFixed32 = new ArrayList();};
    return this.repFixed32;
  }

  public void setRepFixed32(List<Integer> repFixed32) {
    this.repFixed32=repFixed32;
  }

  public List<Integer> getRepSfixed32() {
    if(this.repSfixed32 == null){this.repSfixed32 = new ArrayList();};
    return this.repSfixed32;
  }

  public void setRepSfixed32(List<Integer> repSfixed32) {
    this.repSfixed32=repSfixed32;
  }

  public List<Long> getRepInt64() {
    if(this.repInt64 == null){this.repInt64 = new ArrayList();};
    return this.repInt64;
  }

  public void setRepInt64(List<Long> repInt64) {
    this.repInt64=repInt64;
  }

  public List<Long> getRepUint64() {
    if(this.repUint64 == null){this.repUint64 = new ArrayList();};
    return this.repUint64;
  }

  public void setRepUint64(List<Long> repUint64) {
    this.repUint64=repUint64;
  }

  public List<Long> getRepSint64() {
    if(this.repSint64 == null){this.repSint64 = new ArrayList();};
    return this.repSint64;
  }

  public void setRepSint64(List<Long> repSint64) {
    this.repSint64=repSint64;
  }

  public List<Long> getRepFixed64() {
    if(this.repFixed64 == null){this.repFixed64 = new ArrayList();};
    return this.repFixed64;
  }

  public void setRepFixed64(List<Long> repFixed64) {
    this.repFixed64=repFixed64;
  }

  public List<Long> getRepSfixed64() {
    if(this.repSfixed64 == null){this.repSfixed64 = new ArrayList();};
    return this.repSfixed64;
  }

  public void setRepSfixed64(List<Long> repSfixed64) {
    this.repSfixed64=repSfixed64;
  }

  public List<Boolean> getRepBool() {
    if(this.repBool == null){this.repBool = new ArrayList();};
    return this.repBool;
  }

  public void setRepBool(List<Boolean> repBool) {
    this.repBool=repBool;
  }

  public List<Float> getRepFloat() {
    if(this.repFloat == null){this.repFloat = new ArrayList();};
    return this.repFloat;
  }

  public void setRepFloat(List<Float> repFloat) {
    this.repFloat=repFloat;
  }

  public List<Double> getRepDouble() {
    if(this.repDouble == null){this.repDouble = new ArrayList();};
    return this.repDouble;
  }

  public void setRepDouble(List<Double> repDouble) {
    this.repDouble=repDouble;
  }

  public List<String> getRepString() {
    if(this.repString == null){this.repString = new ArrayList();};
    return this.repString;
  }

  public void setRepString(List<String> repString) {
    this.repString=repString;
  }

  public List<ByteString> getRepBytes() {
    if(this.repBytes == null){this.repBytes = new ArrayList();};
    return this.repBytes;
  }

  public void setRepBytes(List<ByteString> repBytes) {
    this.repBytes=repBytes;
  }

  public List<NestedEnum> getRepNestedEnum() {
    if(this.repNestedEnum == null){this.repNestedEnum = new ArrayList();};
    return this.repNestedEnum;
  }

  public void setRepNestedEnum(List<NestedEnum> repNestedEnum) {
    this.repNestedEnum=repNestedEnum;
  }

  public List<NestedMessage> getRepNestedMessage() {
    if(this.repNestedMessage == null){this.repNestedMessage = new ArrayList();};
    return this.repNestedMessage;
  }

  public void setRepNestedMessage(List<NestedMessage> repNestedMessage) {
    this.repNestedMessage=repNestedMessage;
  }

  public Map<Integer, Integer> getMapInt32Int32() {
    if(this.mapInt32Int32 == null){this.mapInt32Int32 = new HashMap();};
    return this.mapInt32Int32;
  }

  public void setMapInt32Int32(Map<Integer, Integer> mapInt32Int32) {
    this.mapInt32Int32=mapInt32Int32;
  }

  public Map<String, String> getMapStringString() {
    if(this.mapStringString == null){this.mapStringString = new HashMap();};
    return this.mapStringString;
  }

  public void setMapStringString(Map<String, String> mapStringString) {
    this.mapStringString=mapStringString;
  }

  public Map<String, NestedMessage> getMapStringMessage() {
    if(this.mapStringMessage == null){this.mapStringMessage = new HashMap();};
    return this.mapStringMessage;
  }

  public void setMapStringMessage(Map<String, NestedMessage> mapStringMessage) {
    this.mapStringMessage=mapStringMessage;
  }

  public Map<String, NestedEnum> getMapStringEnum() {
    if(this.mapStringEnum == null){this.mapStringEnum = new HashMap();};
    return this.mapStringEnum;
  }

  public void setMapStringEnum(Map<String, NestedEnum> mapStringEnum) {
    this.mapStringEnum=mapStringEnum;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (int32 != null) builder.append(", int32=").append(int32);
    if (uint32 != null) builder.append(", uint32=").append(uint32);
    if (sint32 != null) builder.append(", sint32=").append(sint32);
    if (fixed32 != null) builder.append(", fixed32=").append(fixed32);
    if (sfixed32 != null) builder.append(", sfixed32=").append(sfixed32);
    if (int64 != null) builder.append(", int64=").append(int64);
    if (uint64 != null) builder.append(", uint64=").append(uint64);
    if (sint64 != null) builder.append(", sint64=").append(sint64);
    if (fixed64 != null) builder.append(", fixed64=").append(fixed64);
    if (sfixed64 != null) builder.append(", sfixed64=").append(sfixed64);
    if (bool != null) builder.append(", bool=").append(bool);
    if (float_ != null) builder.append(", float=").append(float_);
    if (double_ != null) builder.append(", double=").append(double_);
    if (string != null) builder.append(", string=").append(string);
    if (bytes != null) builder.append(", bytes=").append(bytes);
    if (nestedEnum != null) builder.append(", nested_enum=").append(nestedEnum);
    if (nestedMessage != null) builder.append(", nested_message=").append(nestedMessage);
    if (!repInt32.isEmpty()) builder.append(", rep_int32=").append(repInt32);
    if (!repUint32.isEmpty()) builder.append(", rep_uint32=").append(repUint32);
    if (!repSint32.isEmpty()) builder.append(", rep_sint32=").append(repSint32);
    if (!repFixed32.isEmpty()) builder.append(", rep_fixed32=").append(repFixed32);
    if (!repSfixed32.isEmpty()) builder.append(", rep_sfixed32=").append(repSfixed32);
    if (!repInt64.isEmpty()) builder.append(", rep_int64=").append(repInt64);
    if (!repUint64.isEmpty()) builder.append(", rep_uint64=").append(repUint64);
    if (!repSint64.isEmpty()) builder.append(", rep_sint64=").append(repSint64);
    if (!repFixed64.isEmpty()) builder.append(", rep_fixed64=").append(repFixed64);
    if (!repSfixed64.isEmpty()) builder.append(", rep_sfixed64=").append(repSfixed64);
    if (!repBool.isEmpty()) builder.append(", rep_bool=").append(repBool);
    if (!repFloat.isEmpty()) builder.append(", rep_float=").append(repFloat);
    if (!repDouble.isEmpty()) builder.append(", rep_double=").append(repDouble);
    if (!repString.isEmpty()) builder.append(", rep_string=").append(repString);
    if (!repBytes.isEmpty()) builder.append(", rep_bytes=").append(repBytes);
    if (!repNestedEnum.isEmpty()) builder.append(", rep_nested_enum=").append(repNestedEnum);
    if (!repNestedMessage.isEmpty()) builder.append(", rep_nested_message=").append(repNestedMessage);
    if (!mapInt32Int32.isEmpty()) builder.append(", map_int32_int32=").append(mapInt32Int32);
    if (!mapStringString.isEmpty()) builder.append(", map_string_string=").append(mapStringString);
    if (!mapStringMessage.isEmpty()) builder.append(", map_string_message=").append(mapStringMessage);
    if (!mapStringEnum.isEmpty()) builder.append(", map_string_enum=").append(mapStringEnum);
    return builder.replace(0, 2, "AllTypes{").append('}').toString();
  }

  public enum NestedEnum implements WireEnum {
    A(0);

    public static final ProtoAdapter<NestedEnum> ADAPTER = new ProtoAdapter_NestedEnum();

    private final int value;

    NestedEnum(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static NestedEnum fromValue(int value) {
      switch (value) {
        case 0: return A;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class ProtoAdapter_NestedEnum extends EnumAdapter<NestedEnum> {
    ProtoAdapter_NestedEnum() {
      super(NestedEnum.class);
    }

    @Override
    protected NestedEnum fromValue(int value) {
      return NestedEnum.fromValue(value);
    }
  }

  @RaptorMessage(
      protoFile = "all_types"
  )
  public static final class NestedMessage {
    public static final ProtoAdapter<NestedMessage> ADAPTER = new ProtoAdapter_NestedMessage();

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_A = 0;

    @RaptorField(
        fieldType = WireFormat.FieldType.INT32,
        order = 1,
        name = "a"
    )
    private Integer a;

    public Integer getA() {
      return this.a;
    }

    public void setA(Integer a) {
      this.a=a;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (a != null) builder.append(", a=").append(a);
      return builder.replace(0, 2, "NestedMessage{").append('}').toString();
    }
  }

  public static final class ProtoAdapter_NestedMessage extends ProtoAdapter<NestedMessage> {
    public ProtoAdapter_NestedMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, NestedMessage.class);
    }

    public int encodedSize(NestedMessage value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.getA());
    }

    public void encode(ProtoWriter writer, NestedMessage value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.getA());
    }

    public NestedMessage decode(ProtoReader reader) throws IOException {
      NestedMessage result = new NestedMessage();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: result.setA(ProtoAdapter.INT32.decode(reader)); break;
        }
      }
      reader.endMessage(token);
      return result;
    }
  }
}
