// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
package com.ppdai.framework.raptor.proto;

import com.google.protobuf.WireFormat;
import com.ppdai.framework.raptor.annotation.RaptorField;
import com.ppdai.framework.raptor.annotation.RaptorMessage;
import com.squareup.wire.*;
import com.squareup.wire.internal.Internal;
import okio.ByteString;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@RaptorMessage(
    protoFile = "all_types"
)
public final class AllTypesPojo extends Message<AllTypesPojo, AllTypesPojo.Builder> {
  public static final ProtoAdapter<AllTypesPojo> ADAPTER = new ProtoAdapter_AllTypesPojo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_INT32 = 0;

  public static final Integer DEFAULT_UINT32 = 0;

  public static final Integer DEFAULT_SINT32 = 0;

  public static final Integer DEFAULT_FIXED32 = 0;

  public static final Integer DEFAULT_SFIXED32 = 0;

  public static final Long DEFAULT_INT64 = 0L;

  public static final Long DEFAULT_UINT64 = 0L;

  public static final Long DEFAULT_SINT64 = 0L;

  public static final Long DEFAULT_FIXED64 = 0L;

  public static final Long DEFAULT_SFIXED64 = 0L;

  public static final Boolean DEFAULT_BOOL = false;

  public static final Float DEFAULT_FLOAT_ = 0.0f;

  public static final Double DEFAULT_DOUBLE_ = 0.0d;

  public static final String DEFAULT_STRING = "";

  public static final ByteString DEFAULT_BYTES = ByteString.EMPTY;

  public static final NestedEnum DEFAULT_NESTEDENUM = NestedEnum.A;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      order = 1,
      name = "int32"
  )
  private Integer int32;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT32,
      order = 2,
      name = "uint32"
  )
  private Integer uint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT32,
      order = 3,
      name = "sint32"
  )
  private Integer sint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED32,
      order = 4,
      name = "fixed32"
  )
  private Integer fixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED32,
      order = 5,
      name = "sfixed32"
  )
  private Integer sfixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT64,
      order = 6,
      name = "int64"
  )
  private Long int64;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT64,
      order = 7,
      name = "uint64"
  )
  private Long uint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT64,
      order = 8,
      name = "sint64"
  )
  private Long sint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED64,
      order = 9,
      name = "fixed64"
  )
  private Long fixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED64,
      order = 10,
      name = "sfixed64"
  )
  private Long sfixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.BOOL,
      order = 11,
      name = "bool"
  )
  private Boolean bool;

  @RaptorField(
      fieldType = WireFormat.FieldType.FLOAT,
      order = 12,
      name = "float"
  )
  private Float float_;

  @RaptorField(
      fieldType = WireFormat.FieldType.DOUBLE,
      order = 13,
      name = "double"
  )
  private Double double_;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      order = 14,
      name = "string"
  )
  private String string;

  @RaptorField(
      fieldType = WireFormat.FieldType.BYTES,
      order = 15,
      name = "bytes"
  )
  private ByteString bytes;

  @RaptorField(
      fieldType = WireFormat.FieldType.ENUM,
      order = 16,
      name = "nested_enum"
  )
  private NestedEnum nestedEnum;

  @RaptorField(
      fieldType = WireFormat.FieldType.MESSAGE,
      order = 17,
      name = "nested_message"
  )
  private NestedMessage nestedMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      order = 201,
      name = "rep_int32",
      repeated = true
  )
  private List<Integer> repInt32;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT32,
      order = 202,
      name = "rep_uint32",
      repeated = true
  )
  private List<Integer> repUint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT32,
      order = 203,
      name = "rep_sint32",
      repeated = true
  )
  private List<Integer> repSint32;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED32,
      order = 204,
      name = "rep_fixed32",
      repeated = true
  )
  private List<Integer> repFixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED32,
      order = 205,
      name = "rep_sfixed32",
      repeated = true
  )
  private List<Integer> repSfixed32;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT64,
      order = 206,
      name = "rep_int64",
      repeated = true
  )
  private List<Long> repInt64;

  @RaptorField(
      fieldType = WireFormat.FieldType.UINT64,
      order = 207,
      name = "rep_uint64",
      repeated = true
  )
  private List<Long> repUint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SINT64,
      order = 208,
      name = "rep_sint64",
      repeated = true
  )
  private List<Long> repSint64;

  @RaptorField(
      fieldType = WireFormat.FieldType.FIXED64,
      order = 209,
      name = "rep_fixed64",
      repeated = true
  )
  private List<Long> repFixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.SFIXED64,
      order = 210,
      name = "rep_sfixed64",
      repeated = true
  )
  private List<Long> repSfixed64;

  @RaptorField(
      fieldType = WireFormat.FieldType.BOOL,
      order = 211,
      name = "rep_bool",
      repeated = true
  )
  private List<Boolean> repBool;

  @RaptorField(
      fieldType = WireFormat.FieldType.FLOAT,
      order = 212,
      name = "rep_float",
      repeated = true
  )
  private List<Float> repFloat;

  @RaptorField(
      fieldType = WireFormat.FieldType.DOUBLE,
      order = 213,
      name = "rep_double",
      repeated = true
  )
  private List<Double> repDouble;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      order = 214,
      name = "rep_string",
      repeated = true
  )
  private List<String> repString;

  @RaptorField(
      fieldType = WireFormat.FieldType.BYTES,
      order = 215,
      name = "rep_bytes",
      repeated = true
  )
  private List<ByteString> repBytes;

  @RaptorField(
      fieldType = WireFormat.FieldType.ENUM,
      order = 216,
      name = "rep_nested_enum",
      repeated = true
  )
  private List<NestedEnum> repNestedEnum;

  @RaptorField(
      fieldType = WireFormat.FieldType.MESSAGE,
      order = 217,
      name = "rep_nested_message",
      repeated = true
  )
  private List<NestedMessage> repNestedMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.INT32,
      keyType = WireFormat.FieldType.INT32,
      order = 501,
      name = "map_int32_int32",
      isMap = true
  )
  private Map<Integer, Integer> mapInt32Int32;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 502,
      name = "map_string_string",
      isMap = true
  )
  private Map<String, String> mapStringString;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 503,
      name = "map_string_message",
      isMap = true
  )
  private Map<String, NestedMessage> mapStringMessage;

  @RaptorField(
      fieldType = WireFormat.FieldType.STRING,
      keyType = WireFormat.FieldType.STRING,
      order = 504,
      name = "map_string_enum",
      isMap = true
  )
  private Map<String, NestedEnum> mapStringEnum;

  public AllTypesPojo(Integer int32, Integer uint32, Integer sint32, Integer fixed32, Integer sfixed32,
                      Long int64, Long uint64, Long sint64, Long fixed64, Long sfixed64, Boolean bool, Float float_,
                      Double double_, String string, ByteString bytes, NestedEnum nestedEnum,
                      NestedMessage nestedMessage, List<Integer> repInt32, List<Integer> repUint32,
                      List<Integer> repSint32, List<Integer> repFixed32, List<Integer> repSfixed32,
                      List<Long> repInt64, List<Long> repUint64, List<Long> repSint64, List<Long> repFixed64,
                      List<Long> repSfixed64, List<Boolean> repBool, List<Float> repFloat, List<Double> repDouble,
                      List<String> repString, List<ByteString> repBytes, List<NestedEnum> repNestedEnum,
                      List<NestedMessage> repNestedMessage, Map<Integer, Integer> mapInt32Int32,
                      Map<String, String> mapStringString, Map<String, NestedMessage> mapStringMessage,
                      Map<String, NestedEnum> mapStringEnum) {
    this(int32, uint32, sint32, fixed32, sfixed32, int64, uint64, sint64, fixed64, sfixed64, bool, float_, double_, string, bytes, nestedEnum, nestedMessage, repInt32, repUint32, repSint32, repFixed32, repSfixed32, repInt64, repUint64, repSint64, repFixed64, repSfixed64, repBool, repFloat, repDouble, repString, repBytes, repNestedEnum, repNestedMessage, mapInt32Int32, mapStringString, mapStringMessage, mapStringEnum, ByteString.EMPTY);
  }

  public AllTypesPojo(Integer int32, Integer uint32, Integer sint32, Integer fixed32, Integer sfixed32,
                      Long int64, Long uint64, Long sint64, Long fixed64, Long sfixed64, Boolean bool, Float float_,
                      Double double_, String string, ByteString bytes, NestedEnum nestedEnum,
                      NestedMessage nestedMessage, List<Integer> repInt32, List<Integer> repUint32,
                      List<Integer> repSint32, List<Integer> repFixed32, List<Integer> repSfixed32,
                      List<Long> repInt64, List<Long> repUint64, List<Long> repSint64, List<Long> repFixed64,
                      List<Long> repSfixed64, List<Boolean> repBool, List<Float> repFloat, List<Double> repDouble,
                      List<String> repString, List<ByteString> repBytes, List<NestedEnum> repNestedEnum,
                      List<NestedMessage> repNestedMessage, Map<Integer, Integer> mapInt32Int32,
                      Map<String, String> mapStringString, Map<String, NestedMessage> mapStringMessage,
                      Map<String, NestedEnum> mapStringEnum, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.int32 = int32;
    this.uint32 = uint32;
    this.sint32 = sint32;
    this.fixed32 = fixed32;
    this.sfixed32 = sfixed32;
    this.int64 = int64;
    this.uint64 = uint64;
    this.sint64 = sint64;
    this.fixed64 = fixed64;
    this.sfixed64 = sfixed64;
    this.bool = bool;
    this.float_ = float_;
    this.double_ = double_;
    this.string = string;
    this.bytes = bytes;
    this.nestedEnum = nestedEnum;
    this.nestedMessage = nestedMessage;
    this.repInt32 = Internal.immutableCopyOf("repInt32", repInt32);
    this.repUint32 = Internal.immutableCopyOf("repUint32", repUint32);
    this.repSint32 = Internal.immutableCopyOf("repSint32", repSint32);
    this.repFixed32 = Internal.immutableCopyOf("repFixed32", repFixed32);
    this.repSfixed32 = Internal.immutableCopyOf("repSfixed32", repSfixed32);
    this.repInt64 = Internal.immutableCopyOf("repInt64", repInt64);
    this.repUint64 = Internal.immutableCopyOf("repUint64", repUint64);
    this.repSint64 = Internal.immutableCopyOf("repSint64", repSint64);
    this.repFixed64 = Internal.immutableCopyOf("repFixed64", repFixed64);
    this.repSfixed64 = Internal.immutableCopyOf("repSfixed64", repSfixed64);
    this.repBool = Internal.immutableCopyOf("repBool", repBool);
    this.repFloat = Internal.immutableCopyOf("repFloat", repFloat);
    this.repDouble = Internal.immutableCopyOf("repDouble", repDouble);
    this.repString = Internal.immutableCopyOf("repString", repString);
    this.repBytes = Internal.immutableCopyOf("repBytes", repBytes);
    this.repNestedEnum = Internal.immutableCopyOf("repNestedEnum", repNestedEnum);
    this.repNestedMessage = Internal.immutableCopyOf("repNestedMessage", repNestedMessage);
    this.mapInt32Int32 = Internal.immutableCopyOf("mapInt32Int32", mapInt32Int32);
    this.mapStringString = Internal.immutableCopyOf("mapStringString", mapStringString);
    this.mapStringMessage = Internal.immutableCopyOf("mapStringMessage", mapStringMessage);
    this.mapStringEnum = Internal.immutableCopyOf("mapStringEnum", mapStringEnum);
  }

  public Integer getInt32() {
    return this.int32;
  }

  public void setInt32(Integer int32) {
    this.int32=int32;
  }

  public Integer getUint32() {
    return this.uint32;
  }

  public void setUint32(Integer uint32) {
    this.uint32=uint32;
  }

  public Integer getSint32() {
    return this.sint32;
  }

  public void setSint32(Integer sint32) {
    this.sint32=sint32;
  }

  public Integer getFixed32() {
    return this.fixed32;
  }

  public void setFixed32(Integer fixed32) {
    this.fixed32=fixed32;
  }

  public Integer getSfixed32() {
    return this.sfixed32;
  }

  public void setSfixed32(Integer sfixed32) {
    this.sfixed32=sfixed32;
  }

  public Long getInt64() {
    return this.int64;
  }

  public void setInt64(Long int64) {
    this.int64=int64;
  }

  public Long getUint64() {
    return this.uint64;
  }

  public void setUint64(Long uint64) {
    this.uint64=uint64;
  }

  public Long getSint64() {
    return this.sint64;
  }

  public void setSint64(Long sint64) {
    this.sint64=sint64;
  }

  public Long getFixed64() {
    return this.fixed64;
  }

  public void setFixed64(Long fixed64) {
    this.fixed64=fixed64;
  }

  public Long getSfixed64() {
    return this.sfixed64;
  }

  public void setSfixed64(Long sfixed64) {
    this.sfixed64=sfixed64;
  }

  public Boolean getBool() {
    return this.bool;
  }

  public void setBool(Boolean bool) {
    this.bool=bool;
  }

  public Float getFloat_() {
    return this.float_;
  }

  public void setFloat_(Float float_) {
    this.float_=float_;
  }

  public Double getDouble_() {
    return this.double_;
  }

  public void setDouble_(Double double_) {
    this.double_=double_;
  }

  public String getString() {
    return this.string;
  }

  public void setString(String string) {
    this.string=string;
  }

  public ByteString getBytes() {
    return this.bytes;
  }

  public void setBytes(ByteString bytes) {
    this.bytes=bytes;
  }

  public NestedEnum getNestedEnum() {
    return this.nestedEnum;
  }

  public void setNestedEnum(NestedEnum nestedEnum) {
    this.nestedEnum=nestedEnum;
  }

  public NestedMessage getNestedMessage() {
    return this.nestedMessage;
  }

  public void setNestedMessage(NestedMessage nestedMessage) {
    this.nestedMessage=nestedMessage;
  }

  public List<Integer> getRepInt32() {
    return this.repInt32;
  }

  public void setRepInt32(List<Integer> repInt32) {
    this.repInt32=repInt32;
  }

  public List<Integer> getRepUint32() {
    return this.repUint32;
  }

  public void setRepUint32(List<Integer> repUint32) {
    this.repUint32=repUint32;
  }

  public List<Integer> getRepSint32() {
    return this.repSint32;
  }

  public void setRepSint32(List<Integer> repSint32) {
    this.repSint32=repSint32;
  }

  public List<Integer> getRepFixed32() {
    return this.repFixed32;
  }

  public void setRepFixed32(List<Integer> repFixed32) {
    this.repFixed32=repFixed32;
  }

  public List<Integer> getRepSfixed32() {
    return this.repSfixed32;
  }

  public void setRepSfixed32(List<Integer> repSfixed32) {
    this.repSfixed32=repSfixed32;
  }

  public List<Long> getRepInt64() {
    return this.repInt64;
  }

  public void setRepInt64(List<Long> repInt64) {
    this.repInt64=repInt64;
  }

  public List<Long> getRepUint64() {
    return this.repUint64;
  }

  public void setRepUint64(List<Long> repUint64) {
    this.repUint64=repUint64;
  }

  public List<Long> getRepSint64() {
    return this.repSint64;
  }

  public void setRepSint64(List<Long> repSint64) {
    this.repSint64=repSint64;
  }

  public List<Long> getRepFixed64() {
    return this.repFixed64;
  }

  public void setRepFixed64(List<Long> repFixed64) {
    this.repFixed64=repFixed64;
  }

  public List<Long> getRepSfixed64() {
    return this.repSfixed64;
  }

  public void setRepSfixed64(List<Long> repSfixed64) {
    this.repSfixed64=repSfixed64;
  }

  public List<Boolean> getRepBool() {
    return this.repBool;
  }

  public void setRepBool(List<Boolean> repBool) {
    this.repBool=repBool;
  }

  public List<Float> getRepFloat() {
    return this.repFloat;
  }

  public void setRepFloat(List<Float> repFloat) {
    this.repFloat=repFloat;
  }

  public List<Double> getRepDouble() {
    return this.repDouble;
  }

  public void setRepDouble(List<Double> repDouble) {
    this.repDouble=repDouble;
  }

  public List<String> getRepString() {
    return this.repString;
  }

  public void setRepString(List<String> repString) {
    this.repString=repString;
  }

  public List<ByteString> getRepBytes() {
    return this.repBytes;
  }

  public void setRepBytes(List<ByteString> repBytes) {
    this.repBytes=repBytes;
  }

  public List<NestedEnum> getRepNestedEnum() {
    return this.repNestedEnum;
  }

  public void setRepNestedEnum(List<NestedEnum> repNestedEnum) {
    this.repNestedEnum=repNestedEnum;
  }

  public List<NestedMessage> getRepNestedMessage() {
    return this.repNestedMessage;
  }

  public void setRepNestedMessage(List<NestedMessage> repNestedMessage) {
    this.repNestedMessage=repNestedMessage;
  }

  public Map<Integer, Integer> getMapInt32Int32() {
    return this.mapInt32Int32;
  }

  public void setMapInt32Int32(Map<Integer, Integer> mapInt32Int32) {
    this.mapInt32Int32=mapInt32Int32;
  }

  public Map<String, String> getMapStringString() {
    return this.mapStringString;
  }

  public void setMapStringString(Map<String, String> mapStringString) {
    this.mapStringString=mapStringString;
  }

  public Map<String, NestedMessage> getMapStringMessage() {
    return this.mapStringMessage;
  }

  public void setMapStringMessage(Map<String, NestedMessage> mapStringMessage) {
    this.mapStringMessage=mapStringMessage;
  }

  public Map<String, NestedEnum> getMapStringEnum() {
    return this.mapStringEnum;
  }

  public void setMapStringEnum(Map<String, NestedEnum> mapStringEnum) {
    this.mapStringEnum=mapStringEnum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.int32 = int32;
    builder.uint32 = uint32;
    builder.sint32 = sint32;
    builder.fixed32 = fixed32;
    builder.sfixed32 = sfixed32;
    builder.int64 = int64;
    builder.uint64 = uint64;
    builder.sint64 = sint64;
    builder.fixed64 = fixed64;
    builder.sfixed64 = sfixed64;
    builder.bool = bool;
    builder.float_ = float_;
    builder.double_ = double_;
    builder.string = string;
    builder.bytes = bytes;
    builder.nestedEnum = nestedEnum;
    builder.nestedMessage = nestedMessage;
    builder.repInt32 = Internal.copyOf("repInt32", repInt32);
    builder.repUint32 = Internal.copyOf("repUint32", repUint32);
    builder.repSint32 = Internal.copyOf("repSint32", repSint32);
    builder.repFixed32 = Internal.copyOf("repFixed32", repFixed32);
    builder.repSfixed32 = Internal.copyOf("repSfixed32", repSfixed32);
    builder.repInt64 = Internal.copyOf("repInt64", repInt64);
    builder.repUint64 = Internal.copyOf("repUint64", repUint64);
    builder.repSint64 = Internal.copyOf("repSint64", repSint64);
    builder.repFixed64 = Internal.copyOf("repFixed64", repFixed64);
    builder.repSfixed64 = Internal.copyOf("repSfixed64", repSfixed64);
    builder.repBool = Internal.copyOf("repBool", repBool);
    builder.repFloat = Internal.copyOf("repFloat", repFloat);
    builder.repDouble = Internal.copyOf("repDouble", repDouble);
    builder.repString = Internal.copyOf("repString", repString);
    builder.repBytes = Internal.copyOf("repBytes", repBytes);
    builder.repNestedEnum = Internal.copyOf("repNestedEnum", repNestedEnum);
    builder.repNestedMessage = Internal.copyOf("repNestedMessage", repNestedMessage);
    builder.mapInt32Int32 = Internal.copyOf("mapInt32Int32", mapInt32Int32);
    builder.mapStringString = Internal.copyOf("mapStringString", mapStringString);
    builder.mapStringMessage = Internal.copyOf("mapStringMessage", mapStringMessage);
    builder.mapStringEnum = Internal.copyOf("mapStringEnum", mapStringEnum);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AllTypesPojo)) return false;
    AllTypesPojo o = (AllTypesPojo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(int32, o.int32)
        && Internal.equals(uint32, o.uint32)
        && Internal.equals(sint32, o.sint32)
        && Internal.equals(fixed32, o.fixed32)
        && Internal.equals(sfixed32, o.sfixed32)
        && Internal.equals(int64, o.int64)
        && Internal.equals(uint64, o.uint64)
        && Internal.equals(sint64, o.sint64)
        && Internal.equals(fixed64, o.fixed64)
        && Internal.equals(sfixed64, o.sfixed64)
        && Internal.equals(bool, o.bool)
        && Internal.equals(float_, o.float_)
        && Internal.equals(double_, o.double_)
        && Internal.equals(string, o.string)
        && Internal.equals(bytes, o.bytes)
        && Internal.equals(nestedEnum, o.nestedEnum)
        && Internal.equals(nestedMessage, o.nestedMessage)
        && repInt32.equals(o.repInt32)
        && repUint32.equals(o.repUint32)
        && repSint32.equals(o.repSint32)
        && repFixed32.equals(o.repFixed32)
        && repSfixed32.equals(o.repSfixed32)
        && repInt64.equals(o.repInt64)
        && repUint64.equals(o.repUint64)
        && repSint64.equals(o.repSint64)
        && repFixed64.equals(o.repFixed64)
        && repSfixed64.equals(o.repSfixed64)
        && repBool.equals(o.repBool)
        && repFloat.equals(o.repFloat)
        && repDouble.equals(o.repDouble)
        && repString.equals(o.repString)
        && repBytes.equals(o.repBytes)
        && repNestedEnum.equals(o.repNestedEnum)
        && repNestedMessage.equals(o.repNestedMessage)
        && mapInt32Int32.equals(o.mapInt32Int32)
        && mapStringString.equals(o.mapStringString)
        && mapStringMessage.equals(o.mapStringMessage)
        && mapStringEnum.equals(o.mapStringEnum);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (int32 != null ? int32.hashCode() : 0);
      result = result * 37 + (uint32 != null ? uint32.hashCode() : 0);
      result = result * 37 + (sint32 != null ? sint32.hashCode() : 0);
      result = result * 37 + (fixed32 != null ? fixed32.hashCode() : 0);
      result = result * 37 + (sfixed32 != null ? sfixed32.hashCode() : 0);
      result = result * 37 + (int64 != null ? int64.hashCode() : 0);
      result = result * 37 + (uint64 != null ? uint64.hashCode() : 0);
      result = result * 37 + (sint64 != null ? sint64.hashCode() : 0);
      result = result * 37 + (fixed64 != null ? fixed64.hashCode() : 0);
      result = result * 37 + (sfixed64 != null ? sfixed64.hashCode() : 0);
      result = result * 37 + (bool != null ? bool.hashCode() : 0);
      result = result * 37 + (float_ != null ? float_.hashCode() : 0);
      result = result * 37 + (double_ != null ? double_.hashCode() : 0);
      result = result * 37 + (string != null ? string.hashCode() : 0);
      result = result * 37 + (bytes != null ? bytes.hashCode() : 0);
      result = result * 37 + (nestedEnum != null ? nestedEnum.hashCode() : 0);
      result = result * 37 + (nestedMessage != null ? nestedMessage.hashCode() : 0);
      result = result * 37 + repInt32.hashCode();
      result = result * 37 + repUint32.hashCode();
      result = result * 37 + repSint32.hashCode();
      result = result * 37 + repFixed32.hashCode();
      result = result * 37 + repSfixed32.hashCode();
      result = result * 37 + repInt64.hashCode();
      result = result * 37 + repUint64.hashCode();
      result = result * 37 + repSint64.hashCode();
      result = result * 37 + repFixed64.hashCode();
      result = result * 37 + repSfixed64.hashCode();
      result = result * 37 + repBool.hashCode();
      result = result * 37 + repFloat.hashCode();
      result = result * 37 + repDouble.hashCode();
      result = result * 37 + repString.hashCode();
      result = result * 37 + repBytes.hashCode();
      result = result * 37 + repNestedEnum.hashCode();
      result = result * 37 + repNestedMessage.hashCode();
      result = result * 37 + mapInt32Int32.hashCode();
      result = result * 37 + mapStringString.hashCode();
      result = result * 37 + mapStringMessage.hashCode();
      result = result * 37 + mapStringEnum.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (int32 != null) builder.append(", int32=").append(int32);
    if (uint32 != null) builder.append(", uint32=").append(uint32);
    if (sint32 != null) builder.append(", sint32=").append(sint32);
    if (fixed32 != null) builder.append(", fixed32=").append(fixed32);
    if (sfixed32 != null) builder.append(", sfixed32=").append(sfixed32);
    if (int64 != null) builder.append(", int64=").append(int64);
    if (uint64 != null) builder.append(", uint64=").append(uint64);
    if (sint64 != null) builder.append(", sint64=").append(sint64);
    if (fixed64 != null) builder.append(", fixed64=").append(fixed64);
    if (sfixed64 != null) builder.append(", sfixed64=").append(sfixed64);
    if (bool != null) builder.append(", bool=").append(bool);
    if (float_ != null) builder.append(", float=").append(float_);
    if (double_ != null) builder.append(", double=").append(double_);
    if (string != null) builder.append(", string=").append(string);
    if (bytes != null) builder.append(", bytes=").append(bytes);
    if (nestedEnum != null) builder.append(", nested_enum=").append(nestedEnum);
    if (nestedMessage != null) builder.append(", nested_message=").append(nestedMessage);
    if (!repInt32.isEmpty()) builder.append(", rep_int32=").append(repInt32);
    if (!repUint32.isEmpty()) builder.append(", rep_uint32=").append(repUint32);
    if (!repSint32.isEmpty()) builder.append(", rep_sint32=").append(repSint32);
    if (!repFixed32.isEmpty()) builder.append(", rep_fixed32=").append(repFixed32);
    if (!repSfixed32.isEmpty()) builder.append(", rep_sfixed32=").append(repSfixed32);
    if (!repInt64.isEmpty()) builder.append(", rep_int64=").append(repInt64);
    if (!repUint64.isEmpty()) builder.append(", rep_uint64=").append(repUint64);
    if (!repSint64.isEmpty()) builder.append(", rep_sint64=").append(repSint64);
    if (!repFixed64.isEmpty()) builder.append(", rep_fixed64=").append(repFixed64);
    if (!repSfixed64.isEmpty()) builder.append(", rep_sfixed64=").append(repSfixed64);
    if (!repBool.isEmpty()) builder.append(", rep_bool=").append(repBool);
    if (!repFloat.isEmpty()) builder.append(", rep_float=").append(repFloat);
    if (!repDouble.isEmpty()) builder.append(", rep_double=").append(repDouble);
    if (!repString.isEmpty()) builder.append(", rep_string=").append(repString);
    if (!repBytes.isEmpty()) builder.append(", rep_bytes=").append(repBytes);
    if (!repNestedEnum.isEmpty()) builder.append(", rep_nested_enum=").append(repNestedEnum);
    if (!repNestedMessage.isEmpty()) builder.append(", rep_nested_message=").append(repNestedMessage);
    if (!mapInt32Int32.isEmpty()) builder.append(", map_int32_int32=").append(mapInt32Int32);
    if (!mapStringString.isEmpty()) builder.append(", map_string_string=").append(mapStringString);
    if (!mapStringMessage.isEmpty()) builder.append(", map_string_message=").append(mapStringMessage);
    if (!mapStringEnum.isEmpty()) builder.append(", map_string_enum=").append(mapStringEnum);
    return builder.replace(0, 2, "AllTypesPojo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<AllTypesPojo, Builder> {
    public Integer int32;

    public Integer uint32;

    public Integer sint32;

    public Integer fixed32;

    public Integer sfixed32;

    public Long int64;

    public Long uint64;

    public Long sint64;

    public Long fixed64;

    public Long sfixed64;

    public Boolean bool;

    public Float float_;

    public Double double_;

    public String string;

    public ByteString bytes;

    public NestedEnum nestedEnum;

    public NestedMessage nestedMessage;

    public List<Integer> repInt32;

    public List<Integer> repUint32;

    public List<Integer> repSint32;

    public List<Integer> repFixed32;

    public List<Integer> repSfixed32;

    public List<Long> repInt64;

    public List<Long> repUint64;

    public List<Long> repSint64;

    public List<Long> repFixed64;

    public List<Long> repSfixed64;

    public List<Boolean> repBool;

    public List<Float> repFloat;

    public List<Double> repDouble;

    public List<String> repString;

    public List<ByteString> repBytes;

    public List<NestedEnum> repNestedEnum;

    public List<NestedMessage> repNestedMessage;

    public Map<Integer, Integer> mapInt32Int32;

    public Map<String, String> mapStringString;

    public Map<String, NestedMessage> mapStringMessage;

    public Map<String, NestedEnum> mapStringEnum;

    public Builder() {
      repInt32 = Internal.newMutableList();
      repUint32 = Internal.newMutableList();
      repSint32 = Internal.newMutableList();
      repFixed32 = Internal.newMutableList();
      repSfixed32 = Internal.newMutableList();
      repInt64 = Internal.newMutableList();
      repUint64 = Internal.newMutableList();
      repSint64 = Internal.newMutableList();
      repFixed64 = Internal.newMutableList();
      repSfixed64 = Internal.newMutableList();
      repBool = Internal.newMutableList();
      repFloat = Internal.newMutableList();
      repDouble = Internal.newMutableList();
      repString = Internal.newMutableList();
      repBytes = Internal.newMutableList();
      repNestedEnum = Internal.newMutableList();
      repNestedMessage = Internal.newMutableList();
      mapInt32Int32 = Internal.newMutableMap();
      mapStringString = Internal.newMutableMap();
      mapStringMessage = Internal.newMutableMap();
      mapStringEnum = Internal.newMutableMap();
    }

    public Builder int32(Integer int32) {
      this.int32 = int32;
      return this;
    }

    public Builder uint32(Integer uint32) {
      this.uint32 = uint32;
      return this;
    }

    public Builder sint32(Integer sint32) {
      this.sint32 = sint32;
      return this;
    }

    public Builder fixed32(Integer fixed32) {
      this.fixed32 = fixed32;
      return this;
    }

    public Builder sfixed32(Integer sfixed32) {
      this.sfixed32 = sfixed32;
      return this;
    }

    public Builder int64(Long int64) {
      this.int64 = int64;
      return this;
    }

    public Builder uint64(Long uint64) {
      this.uint64 = uint64;
      return this;
    }

    public Builder sint64(Long sint64) {
      this.sint64 = sint64;
      return this;
    }

    public Builder fixed64(Long fixed64) {
      this.fixed64 = fixed64;
      return this;
    }

    public Builder sfixed64(Long sfixed64) {
      this.sfixed64 = sfixed64;
      return this;
    }

    public Builder bool(Boolean bool) {
      this.bool = bool;
      return this;
    }

    public Builder float_(Float float_) {
      this.float_ = float_;
      return this;
    }

    public Builder double_(Double double_) {
      this.double_ = double_;
      return this;
    }

    public Builder string(String string) {
      this.string = string;
      return this;
    }

    public Builder bytes(ByteString bytes) {
      this.bytes = bytes;
      return this;
    }

    public Builder nestedEnum(NestedEnum nestedEnum) {
      this.nestedEnum = nestedEnum;
      return this;
    }

    public Builder nestedMessage(NestedMessage nestedMessage) {
      this.nestedMessage = nestedMessage;
      return this;
    }

    public Builder repInt32(List<Integer> repInt32) {
      Internal.checkElementsNotNull(repInt32);
      this.repInt32 = repInt32;
      return this;
    }

    public Builder repUint32(List<Integer> repUint32) {
      Internal.checkElementsNotNull(repUint32);
      this.repUint32 = repUint32;
      return this;
    }

    public Builder repSint32(List<Integer> repSint32) {
      Internal.checkElementsNotNull(repSint32);
      this.repSint32 = repSint32;
      return this;
    }

    public Builder repFixed32(List<Integer> repFixed32) {
      Internal.checkElementsNotNull(repFixed32);
      this.repFixed32 = repFixed32;
      return this;
    }

    public Builder repSfixed32(List<Integer> repSfixed32) {
      Internal.checkElementsNotNull(repSfixed32);
      this.repSfixed32 = repSfixed32;
      return this;
    }

    public Builder repInt64(List<Long> repInt64) {
      Internal.checkElementsNotNull(repInt64);
      this.repInt64 = repInt64;
      return this;
    }

    public Builder repUint64(List<Long> repUint64) {
      Internal.checkElementsNotNull(repUint64);
      this.repUint64 = repUint64;
      return this;
    }

    public Builder repSint64(List<Long> repSint64) {
      Internal.checkElementsNotNull(repSint64);
      this.repSint64 = repSint64;
      return this;
    }

    public Builder repFixed64(List<Long> repFixed64) {
      Internal.checkElementsNotNull(repFixed64);
      this.repFixed64 = repFixed64;
      return this;
    }

    public Builder repSfixed64(List<Long> repSfixed64) {
      Internal.checkElementsNotNull(repSfixed64);
      this.repSfixed64 = repSfixed64;
      return this;
    }

    public Builder repBool(List<Boolean> repBool) {
      Internal.checkElementsNotNull(repBool);
      this.repBool = repBool;
      return this;
    }

    public Builder repFloat(List<Float> repFloat) {
      Internal.checkElementsNotNull(repFloat);
      this.repFloat = repFloat;
      return this;
    }

    public Builder repDouble(List<Double> repDouble) {
      Internal.checkElementsNotNull(repDouble);
      this.repDouble = repDouble;
      return this;
    }

    public Builder repString(List<String> repString) {
      Internal.checkElementsNotNull(repString);
      this.repString = repString;
      return this;
    }

    public Builder repBytes(List<ByteString> repBytes) {
      Internal.checkElementsNotNull(repBytes);
      this.repBytes = repBytes;
      return this;
    }

    public Builder repNestedEnum(List<NestedEnum> repNestedEnum) {
      Internal.checkElementsNotNull(repNestedEnum);
      this.repNestedEnum = repNestedEnum;
      return this;
    }

    public Builder repNestedMessage(List<NestedMessage> repNestedMessage) {
      Internal.checkElementsNotNull(repNestedMessage);
      this.repNestedMessage = repNestedMessage;
      return this;
    }

    public Builder mapInt32Int32(Map<Integer, Integer> mapInt32Int32) {
      Internal.checkElementsNotNull(mapInt32Int32);
      this.mapInt32Int32 = mapInt32Int32;
      return this;
    }

    public Builder mapStringString(Map<String, String> mapStringString) {
      Internal.checkElementsNotNull(mapStringString);
      this.mapStringString = mapStringString;
      return this;
    }

    public Builder mapStringMessage(Map<String, NestedMessage> mapStringMessage) {
      Internal.checkElementsNotNull(mapStringMessage);
      this.mapStringMessage = mapStringMessage;
      return this;
    }

    public Builder mapStringEnum(Map<String, NestedEnum> mapStringEnum) {
      Internal.checkElementsNotNull(mapStringEnum);
      this.mapStringEnum = mapStringEnum;
      return this;
    }

    @Override
    public AllTypesPojo build() {
      return new AllTypesPojo(int32, uint32, sint32, fixed32, sfixed32, int64, uint64, sint64, fixed64, sfixed64, bool, float_, double_, string, bytes, nestedEnum, nestedMessage, repInt32, repUint32, repSint32, repFixed32, repSfixed32, repInt64, repUint64, repSint64, repFixed64, repSfixed64, repBool, repFloat, repDouble, repString, repBytes, repNestedEnum, repNestedMessage, mapInt32Int32, mapStringString, mapStringMessage, mapStringEnum, super.buildUnknownFields());
    }
  }

  public enum NestedEnum implements WireEnum {
    A(0);

    public static final ProtoAdapter<NestedEnum> ADAPTER = new ProtoAdapter_NestedEnum();

    private final int value;

    NestedEnum(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static NestedEnum fromValue(int value) {
      switch (value) {
        case 0: return A;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_NestedEnum extends EnumAdapter<NestedEnum> {
    ProtoAdapter_NestedEnum() {
      super(NestedEnum.class);
    }

    @Override
    protected NestedEnum fromValue(int value) {
      return NestedEnum.fromValue(value);
    }
  }

  @RaptorMessage(
      protoFile = "all_types"
  )
  public static final class NestedMessage extends Message<NestedMessage, NestedMessage.Builder> {
    public static final ProtoAdapter<NestedMessage> ADAPTER = new ProtoAdapter_NestedMessage();

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_A = 0;

    @RaptorField(
        fieldType = WireFormat.FieldType.INT32,
        order = 1,
        name = "a"
    )
    private Integer a;

    public NestedMessage(Integer a) {
      this(a, ByteString.EMPTY);
    }

    public NestedMessage(Integer a, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.a = a;
    }

    public Integer getA() {
      return this.a;
    }

    public void setA(Integer a) {
      this.a=a;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.a = a;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof NestedMessage)) return false;
      NestedMessage o = (NestedMessage) other;
      return unknownFields().equals(o.unknownFields())
          && Internal.equals(a, o.a);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (a != null ? a.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (a != null) builder.append(", a=").append(a);
      return builder.replace(0, 2, "NestedMessage{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<NestedMessage, Builder> {
      public Integer a;

      public Builder() {
      }

      public Builder a(Integer a) {
        this.a = a;
        return this;
      }

      @Override
      public NestedMessage build() {
        return new NestedMessage(a, super.buildUnknownFields());
      }
    }
  }

  public static final class ProtoAdapter_NestedMessage extends ProtoAdapter<NestedMessage> {
    public ProtoAdapter_NestedMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, NestedMessage.class);
    }

    @Override
    public int encodedSize(NestedMessage value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.getA())
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NestedMessage value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.getA());
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NestedMessage decode(ProtoReader reader) throws IOException {
      NestedMessage.Builder builder = new NestedMessage.Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.a(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NestedMessage redact(NestedMessage value) {
      NestedMessage.Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
