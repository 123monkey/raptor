// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: com/ppdai/framework/raptor/proto/helloworld.proto
package com.ppdai.framework.raptor.proto;

import com.ppdai.framework.raptor.annotation.RaptorField;
import com.ppdai.framework.raptor.annotation.RaptorMessage;

import java.util.Map;

@RaptorMessage(
    version = "version.0.1",
    protoFile = "helloworld"
)
public final class HelloReply {
  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MESSAGE = "";

  public static final Integer DEFAULT_CODE = 0;

  @RaptorField(
      fieldType = "string",
      order = 1,
      name = "message"
  )
  private String message;

  @RaptorField(
      fieldType = "int32",
      order = 2,
      name = "code"
  )
  private Integer code;

  @RaptorField(
      fieldType = "message",
      order = 3,
      name = "request"
  )
  private HelloRequest request;

  @RaptorField(
      fieldType = "string",
      keyType = "string",
      order = 4,
      name = "result",
      isMap = true
  )
  private Map<String, String> result;

  public HelloReply() {
  }

  public HelloReply(String message, Integer code, HelloRequest request,
      Map<String, String> result) {
    this.message = message;
    this.code = code;
    this.request = request;
    this.result = result;
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message=message;
  }

  public Integer getCode() {
    return this.code;
  }

  public void setCode(Integer code) {
    this.code=code;
  }

  public HelloRequest getRequest() {
    return this.request;
  }

  public void setRequest(HelloRequest request) {
    this.request=request;
  }

  public Map<String, String> getResult() {
    return this.result;
  }

  public void setResult(Map<String, String> result) {
    this.result=result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (message != null) builder.append(", message=").append(message);
    if (code != null) builder.append(", code=").append(code);
    if (request != null) builder.append(", request=").append(request);
    if (result != null  && !result.isEmpty()) builder.append(", result=").append(result);
    return builder.replace(0, 2, "HelloReply{").append('}').toString();
  }
}
