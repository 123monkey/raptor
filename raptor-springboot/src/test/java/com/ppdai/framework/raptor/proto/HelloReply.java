// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: com/ppdai/framework/raptor/proto/helloworld.proto
package com.ppdai.framework.raptor.proto;

import com.ppdai.framework.raptor.annotation.RaptorMessage;
import com.squareup.wire.*;
import com.squareup.wire.internal.Internal;
import okio.ByteString;

import java.io.IOException;
import java.util.List;

@RaptorMessage(
    version = "version.0.1",
    protoFile = "helloworld"
)
public final class HelloReply extends Message<HelloReply, HelloReply.Builder> {
  public static final ProtoAdapter<HelloReply> ADAPTER = new ProtoAdapter_HelloReply();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MESSAGE = "";

  public static final HelloRequest.Corpus DEFAULT_CORPUS = HelloRequest.Corpus.UNIVERSAL;

  public static final Integer DEFAULT_CODE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private String message;

  @WireField(
      tag = 2,
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Corpus#ADAPTER"
  )
  private HelloRequest.Corpus corpus;

  @WireField(
      tag = 3,
      adapter = "com.ppdai.framework.raptor.proto.Result#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private List<Result> results;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  private Integer code;

  public HelloReply() {
    super(ADAPTER, ByteString.EMPTY);
  }

  public HelloReply(String message, HelloRequest.Corpus corpus, List<Result> results,
      Integer code) {
    this(message, corpus, results, code, ByteString.EMPTY);
  }

  public HelloReply(String message, HelloRequest.Corpus corpus, List<Result> results, Integer code,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.message = message;
    this.corpus = corpus;
    this.results = Internal.immutableCopyOf("results", results);
    this.code = code;
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message=message;
  }

  public HelloRequest.Corpus getCorpus() {
    return this.corpus;
  }

  public void setCorpus(HelloRequest.Corpus corpus) {
    this.corpus=corpus;
  }

  public List<Result> getResults() {
    return this.results;
  }

  public void setResults(List<Result> results) {
    this.results=results;
  }

  public Integer getCode() {
    return this.code;
  }

  public void setCode(Integer code) {
    this.code=code;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.message = message;
    builder.corpus = corpus;
    builder.results = Internal.copyOf("results", results);
    builder.code = code;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HelloReply)) return false;
    HelloReply o = (HelloReply) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(message, o.message)
        && Internal.equals(corpus, o.corpus)
        && results.equals(o.results)
        && Internal.equals(code, o.code);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (message != null ? message.hashCode() : 0);
      result = result * 37 + (corpus != null ? corpus.hashCode() : 0);
      result = result * 37 + results.hashCode();
      result = result * 37 + (code != null ? code.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (message != null) builder.append(", message=").append(message);
    if (corpus != null) builder.append(", corpus=").append(corpus);
    if (!results.isEmpty()) builder.append(", results=").append(results);
    if (code != null) builder.append(", code=").append(code);
    return builder.replace(0, 2, "HelloReply{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HelloReply, Builder> {
    public String message;

    public HelloRequest.Corpus corpus;

    public List<Result> results;

    public Integer code;

    public Builder() {
      results = Internal.newMutableList();
    }

    public Builder message(String message) {
      this.message = message;
      return this;
    }

    public Builder corpus(HelloRequest.Corpus corpus) {
      this.corpus = corpus;
      return this;
    }

    public Builder results(List<Result> results) {
      Internal.checkElementsNotNull(results);
      this.results = results;
      return this;
    }

    public Builder code(Integer code) {
      this.code = code;
      return this;
    }

    @Override
    public HelloReply build() {
      return new HelloReply(message, corpus, results, code, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HelloReply extends ProtoAdapter<HelloReply> {
    public ProtoAdapter_HelloReply() {
      super(FieldEncoding.LENGTH_DELIMITED, HelloReply.class);
    }

    @Override
    public int encodedSize(HelloReply value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.message)
          + HelloRequest.Corpus.ADAPTER.encodedSizeWithTag(2, value.corpus)
          + Result.ADAPTER.asRepeated().encodedSizeWithTag(3, value.results)
          + ProtoAdapter.INT32.encodedSizeWithTag(4, value.code)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HelloReply value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.message);
      HelloRequest.Corpus.ADAPTER.encodeWithTag(writer, 2, value.corpus);
      Result.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.results);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.code);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HelloReply decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.message(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.corpus(HelloRequest.Corpus.ADAPTER.decode(reader));
            } catch (EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.results.add(Result.ADAPTER.decode(reader)); break;
          case 4: builder.code(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HelloReply redact(HelloReply value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.results, Result.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
