// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
package com.ppdai.framework.raptor.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.internal.Internal;

import java.io.IOException;
import java.util.Map;

public final class ProtoAdapter_AllTypesPojo extends ProtoAdapter<AllTypesPojo> {
  private final ProtoAdapter<Map<Integer, Integer>> map_int32_int32 = ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32);

  private final ProtoAdapter<Map<String, String>> map_string_string = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

  private final ProtoAdapter<Map<String, AllTypesPojo.NestedMessage>> map_string_message = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, AllTypesPojo.NestedMessage.ADAPTER);

  private final ProtoAdapter<Map<String, AllTypesPojo.NestedEnum>> map_string_enum = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, AllTypesPojo.NestedEnum.ADAPTER);

  public ProtoAdapter_AllTypesPojo() {
    super(FieldEncoding.LENGTH_DELIMITED, AllTypesPojo.class);
  }

  @Override
  public int encodedSize(AllTypesPojo value) {
    return ProtoAdapter.INT32.encodedSizeWithTag(1, value.getInt32())
        + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.getUint32())
        + ProtoAdapter.SINT32.encodedSizeWithTag(3, value.getSint32())
        + ProtoAdapter.FIXED32.encodedSizeWithTag(4, value.getFixed32())
        + ProtoAdapter.SFIXED32.encodedSizeWithTag(5, value.getSfixed32())
        + ProtoAdapter.INT64.encodedSizeWithTag(6, value.getInt64())
        + ProtoAdapter.UINT64.encodedSizeWithTag(7, value.getUint64())
        + ProtoAdapter.SINT64.encodedSizeWithTag(8, value.getSint64())
        + ProtoAdapter.FIXED64.encodedSizeWithTag(9, value.getFixed64())
        + ProtoAdapter.SFIXED64.encodedSizeWithTag(10, value.getSfixed64())
        + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.getBool())
        + ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.getFloat_())
        + ProtoAdapter.DOUBLE.encodedSizeWithTag(13, value.getDouble_())
        + ProtoAdapter.STRING.encodedSizeWithTag(14, value.getString())
        + ProtoAdapter.BYTES.encodedSizeWithTag(15, value.getBytes())
        + AllTypesPojo.NestedEnum.ADAPTER.encodedSizeWithTag(16, value.getNestedEnum())
        + AllTypesPojo.NestedMessage.ADAPTER.encodedSizeWithTag(17, value.getNestedMessage())
        + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.getRepInt32())
        + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.getRepUint32())
        + ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.getRepSint32())
        + ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.getRepFixed32())
        + ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.getRepSfixed32())
        + ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.getRepInt64())
        + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.getRepUint64())
        + ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.getRepSint64())
        + ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.getRepFixed64())
        + ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.getRepSfixed64())
        + ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.getRepBool())
        + ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.getRepFloat())
        + ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.getRepDouble())
        + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.getRepString())
        + ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.getRepBytes())
        + AllTypesPojo.NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.getRepNestedEnum())
        + AllTypesPojo.NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.getRepNestedMessage())
        + map_int32_int32.encodedSizeWithTag(501, value.getMapInt32Int32())
        + map_string_string.encodedSizeWithTag(502, value.getMapStringString())
        + map_string_message.encodedSizeWithTag(503, value.getMapStringMessage())
        + map_string_enum.encodedSizeWithTag(504, value.getMapStringEnum())
        + value.unknownFields().size();
  }

  @Override
  public void encode(ProtoWriter writer, AllTypesPojo value) throws IOException {
    ProtoAdapter.INT32.encodeWithTag(writer, 1, value.getInt32());
    ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.getUint32());
    ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.getSint32());
    ProtoAdapter.FIXED32.encodeWithTag(writer, 4, value.getFixed32());
    ProtoAdapter.SFIXED32.encodeWithTag(writer, 5, value.getSfixed32());
    ProtoAdapter.INT64.encodeWithTag(writer, 6, value.getInt64());
    ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.getUint64());
    ProtoAdapter.SINT64.encodeWithTag(writer, 8, value.getSint64());
    ProtoAdapter.FIXED64.encodeWithTag(writer, 9, value.getFixed64());
    ProtoAdapter.SFIXED64.encodeWithTag(writer, 10, value.getSfixed64());
    ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.getBool());
    ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.getFloat_());
    ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.getDouble_());
    ProtoAdapter.STRING.encodeWithTag(writer, 14, value.getString());
    ProtoAdapter.BYTES.encodeWithTag(writer, 15, value.getBytes());
    AllTypesPojo.NestedEnum.ADAPTER.encodeWithTag(writer, 16, value.getNestedEnum());
    AllTypesPojo.NestedMessage.ADAPTER.encodeWithTag(writer, 17, value.getNestedMessage());
    ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.getRepInt32());
    ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.getRepUint32());
    ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.getRepSint32());
    ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.getRepFixed32());
    ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.getRepSfixed32());
    ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.getRepInt64());
    ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.getRepUint64());
    ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.getRepSint64());
    ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.getRepFixed64());
    ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.getRepSfixed64());
    ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.getRepBool());
    ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.getRepFloat());
    ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.getRepDouble());
    ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.getRepString());
    ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.getRepBytes());
    AllTypesPojo.NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.getRepNestedEnum());
    AllTypesPojo.NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.getRepNestedMessage());
    map_int32_int32.encodeWithTag(writer, 501, value.getMapInt32Int32());
    map_string_string.encodeWithTag(writer, 502, value.getMapStringString());
    map_string_message.encodeWithTag(writer, 503, value.getMapStringMessage());
    map_string_enum.encodeWithTag(writer, 504, value.getMapStringEnum());
    writer.writeBytes(value.unknownFields());
  }

  @Override
  public AllTypesPojo decode(ProtoReader reader) throws IOException {
    AllTypesPojo.Builder builder = new AllTypesPojo.Builder();
    long token = reader.beginMessage();
    for (int tag; (tag = reader.nextTag()) != -1;) {
      switch (tag) {
        case 1: builder.int32(ProtoAdapter.INT32.decode(reader)); break;
        case 2: builder.uint32(ProtoAdapter.UINT32.decode(reader)); break;
        case 3: builder.sint32(ProtoAdapter.SINT32.decode(reader)); break;
        case 4: builder.fixed32(ProtoAdapter.FIXED32.decode(reader)); break;
        case 5: builder.sfixed32(ProtoAdapter.SFIXED32.decode(reader)); break;
        case 6: builder.int64(ProtoAdapter.INT64.decode(reader)); break;
        case 7: builder.uint64(ProtoAdapter.UINT64.decode(reader)); break;
        case 8: builder.sint64(ProtoAdapter.SINT64.decode(reader)); break;
        case 9: builder.fixed64(ProtoAdapter.FIXED64.decode(reader)); break;
        case 10: builder.sfixed64(ProtoAdapter.SFIXED64.decode(reader)); break;
        case 11: builder.bool(ProtoAdapter.BOOL.decode(reader)); break;
        case 12: builder.float_(ProtoAdapter.FLOAT.decode(reader)); break;
        case 13: builder.double_(ProtoAdapter.DOUBLE.decode(reader)); break;
        case 14: builder.string(ProtoAdapter.STRING.decode(reader)); break;
        case 15: builder.bytes(ProtoAdapter.BYTES.decode(reader)); break;
        case 16: {
          try {
            builder.nestedEnum(AllTypesPojo.NestedEnum.ADAPTER.decode(reader));
          } catch (EnumConstantNotFoundException e) {
            builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
          }
          break;
        }
        case 17: builder.nestedMessage(AllTypesPojo.NestedMessage.ADAPTER.decode(reader)); break;
        case 201: builder.repInt32.add(ProtoAdapter.INT32.decode(reader)); break;
        case 202: builder.repUint32.add(ProtoAdapter.UINT32.decode(reader)); break;
        case 203: builder.repSint32.add(ProtoAdapter.SINT32.decode(reader)); break;
        case 204: builder.repFixed32.add(ProtoAdapter.FIXED32.decode(reader)); break;
        case 205: builder.repSfixed32.add(ProtoAdapter.SFIXED32.decode(reader)); break;
        case 206: builder.repInt64.add(ProtoAdapter.INT64.decode(reader)); break;
        case 207: builder.repUint64.add(ProtoAdapter.UINT64.decode(reader)); break;
        case 208: builder.repSint64.add(ProtoAdapter.SINT64.decode(reader)); break;
        case 209: builder.repFixed64.add(ProtoAdapter.FIXED64.decode(reader)); break;
        case 210: builder.repSfixed64.add(ProtoAdapter.SFIXED64.decode(reader)); break;
        case 211: builder.repBool.add(ProtoAdapter.BOOL.decode(reader)); break;
        case 212: builder.repFloat.add(ProtoAdapter.FLOAT.decode(reader)); break;
        case 213: builder.repDouble.add(ProtoAdapter.DOUBLE.decode(reader)); break;
        case 214: builder.repString.add(ProtoAdapter.STRING.decode(reader)); break;
        case 215: builder.repBytes.add(ProtoAdapter.BYTES.decode(reader)); break;
        case 216: {
          try {
            builder.repNestedEnum.add(AllTypesPojo.NestedEnum.ADAPTER.decode(reader));
          } catch (EnumConstantNotFoundException e) {
            builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
          }
          break;
        }
        case 217: builder.repNestedMessage.add(AllTypesPojo.NestedMessage.ADAPTER.decode(reader)); break;
        case 501: builder.mapInt32Int32.putAll(map_int32_int32.decode(reader)); break;
        case 502: builder.mapStringString.putAll(map_string_string.decode(reader)); break;
        case 503: builder.mapStringMessage.putAll(map_string_message.decode(reader)); break;
        case 504: builder.mapStringEnum.putAll(map_string_enum.decode(reader)); break;
        default: {
          FieldEncoding fieldEncoding = reader.peekFieldEncoding();
          Object value = fieldEncoding.rawProtoAdapter().decode(reader);
          builder.addUnknownField(tag, fieldEncoding, value);
        }
      }
    }
    reader.endMessage(token);
    return builder.build();
  }

  @Override
  public AllTypesPojo redact(AllTypesPojo value) {
    AllTypesPojo.Builder builder = value.newBuilder();
    if (builder.nestedMessage != null) builder.nestedMessage = AllTypesPojo.NestedMessage.ADAPTER.redact(builder.nestedMessage);
    Internal.redactElements(builder.repNestedMessage, AllTypesPojo.NestedMessage.ADAPTER);
    Internal.redactElements(builder.mapStringMessage, AllTypesPojo.NestedMessage.ADAPTER);
    builder.clearUnknownFields();
    return builder.build();
  }
}
