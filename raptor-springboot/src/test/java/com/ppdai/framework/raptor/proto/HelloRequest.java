// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: com/ppdai/framework/raptor/proto/helloworld.proto
package com.ppdai.framework.raptor.proto;

import com.ppdai.framework.raptor.annotation.RaptorMessage;
import com.squareup.wire.*;
import com.squareup.wire.internal.Internal;
import okio.ByteString;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@RaptorMessage(
    version = "version.0.1",
    protoFile = "helloworld"
)
public final class HelloRequest extends Message<HelloRequest, HelloRequest.Builder> {
  public static final ProtoAdapter<HelloRequest> ADAPTER = new ProtoAdapter_HelloRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Corpus DEFAULT_CORPUS = Corpus.UNIVERSAL;

  public static final Double DEFAULT_TDOUBLE = 0.0d;

  public static final Float DEFAULT_TFLOAT = 0.0f;

  public static final Integer DEFAULT_TINT32 = 0;

  public static final Long DEFAULT_TINT64 = 0L;

  public static final Integer DEFAULT_TUNIT32 = 0;

  public static final Long DEFAULT_TUNIT64 = 0L;

  public static final Integer DEFAULT_TSINT32 = 0;

  public static final Long DEFAULT_TSINT64 = 0L;

  public static final Integer DEFAULT_TFIXED32 = 0;

  public static final Long DEFAULT_TFIXED64 = 0L;

  public static final Integer DEFAULT_TSFIXED32 = 0;

  public static final Long DEFAULT_TSFIXED64 = 0L;

  public static final ByteString DEFAULT_TBYTES = ByteString.EMPTY;

  public static final Boolean DEFAULT_TBOOL = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private String name;

  @WireField(
      tag = 2,
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Corpus#ADAPTER"
  )
  private Corpus corpus;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  private List<String> snippets;

  @WireField(
      tag = 4,
      adapter = "com.ppdai.framework.raptor.proto.Cat#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private List<Cat> cats;

  @WireField(
      tag = 5,
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Result#ADAPTER"
  )
  private Result result;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  private Double tDouble;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  private Float tFloat;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  private Integer tint32;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  private Long tint64;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private Integer tunit32;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  private Long tunit64;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  private Integer tsint32;

  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private Long tsint64;

  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  private Integer tfixed32;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  private Long tfixed64;

  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  private Integer tsfixed32;

  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  private Long tsfixed64;

  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  private ByteString tbytes;

  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private Boolean tbool;

  @WireField(
      tag = 201,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REPEATED
  )
  private List<Integer> repInt32;

  @WireField(
      tag = 202,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  private List<Integer> repUint32;

  @WireField(
      tag = 203,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32",
      label = WireField.Label.REPEATED
  )
  private List<Integer> repSint32;

  @WireField(
      tag = 204,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
      label = WireField.Label.REPEATED
  )
  private List<Integer> repFixed32;

  @WireField(
      tag = 205,
      adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
      label = WireField.Label.REPEATED
  )
  private List<Integer> repSfixed32;

  @WireField(
      tag = 206,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REPEATED
  )
  private List<Long> repInt64;

  @WireField(
      tag = 207,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  private List<Long> repUint64;

  @WireField(
      tag = 208,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.REPEATED
  )
  private List<Long> repSint64;

  @WireField(
      tag = 209,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
      label = WireField.Label.REPEATED
  )
  private List<Long> repFixed64;

  @WireField(
      tag = 210,
      adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
      label = WireField.Label.REPEATED
  )
  private List<Long> repSfixed64;

  @WireField(
      tag = 211,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.REPEATED
  )
  private List<Boolean> repBool;

  @WireField(
      tag = 212,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REPEATED
  )
  private List<Float> repFloat;

  @WireField(
      tag = 213,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
      label = WireField.Label.REPEATED
  )
  private List<Double> repDouble;

  @WireField(
      tag = 214,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  private List<String> repString;

  @WireField(
      tag = 215,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REPEATED
  )
  private List<ByteString> repBytes;

  @WireField(
      tag = 216,
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Result#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private List<Result> repResult;

  @WireField(
      tag = 501,
      keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  private Map<Integer, Integer> mapInt32Int32;

  @WireField(
      tag = 502,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private Map<String, String> mapStringString;

  @WireField(
      tag = 503,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Result#ADAPTER"
  )
  private Map<String, Result> mapStringMessage;

  @WireField(
      tag = 504,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Corpus#ADAPTER"
  )
  private Map<String, Corpus> mapStringEnum;

  public HelloRequest() {
    super(ADAPTER, ByteString.EMPTY);
  }

  public HelloRequest(String name, Corpus corpus, List<String> snippets, List<Cat> cats,
      Result result, Double tDouble, Float tFloat, Integer tint32, Long tint64, Integer tunit32,
      Long tunit64, Integer tsint32, Long tsint64, Integer tfixed32, Long tfixed64,
      Integer tsfixed32, Long tsfixed64, ByteString tbytes, Boolean tbool, List<Integer> repInt32,
      List<Integer> repUint32, List<Integer> repSint32, List<Integer> repFixed32,
      List<Integer> repSfixed32, List<Long> repInt64, List<Long> repUint64, List<Long> repSint64,
      List<Long> repFixed64, List<Long> repSfixed64, List<Boolean> repBool, List<Float> repFloat,
      List<Double> repDouble, List<String> repString, List<ByteString> repBytes,
      List<Result> repResult, Map<Integer, Integer> mapInt32Int32,
      Map<String, String> mapStringString, Map<String, Result> mapStringMessage,
      Map<String, Corpus> mapStringEnum) {
    this(name, corpus, snippets, cats, result, tDouble, tFloat, tint32, tint64, tunit32, tunit64, tsint32, tsint64, tfixed32, tfixed64, tsfixed32, tsfixed64, tbytes, tbool, repInt32, repUint32, repSint32, repFixed32, repSfixed32, repInt64, repUint64, repSint64, repFixed64, repSfixed64, repBool, repFloat, repDouble, repString, repBytes, repResult, mapInt32Int32, mapStringString, mapStringMessage, mapStringEnum, ByteString.EMPTY);
  }

  public HelloRequest(String name, Corpus corpus, List<String> snippets, List<Cat> cats,
      Result result, Double tDouble, Float tFloat, Integer tint32, Long tint64, Integer tunit32,
      Long tunit64, Integer tsint32, Long tsint64, Integer tfixed32, Long tfixed64,
      Integer tsfixed32, Long tsfixed64, ByteString tbytes, Boolean tbool, List<Integer> repInt32,
      List<Integer> repUint32, List<Integer> repSint32, List<Integer> repFixed32,
      List<Integer> repSfixed32, List<Long> repInt64, List<Long> repUint64, List<Long> repSint64,
      List<Long> repFixed64, List<Long> repSfixed64, List<Boolean> repBool, List<Float> repFloat,
      List<Double> repDouble, List<String> repString, List<ByteString> repBytes,
      List<Result> repResult, Map<Integer, Integer> mapInt32Int32,
      Map<String, String> mapStringString, Map<String, Result> mapStringMessage,
      Map<String, Corpus> mapStringEnum, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.corpus = corpus;
    this.snippets = Internal.immutableCopyOf("snippets", snippets);
    this.cats = Internal.immutableCopyOf("cats", cats);
    this.result = result;
    this.tDouble = tDouble;
    this.tFloat = tFloat;
    this.tint32 = tint32;
    this.tint64 = tint64;
    this.tunit32 = tunit32;
    this.tunit64 = tunit64;
    this.tsint32 = tsint32;
    this.tsint64 = tsint64;
    this.tfixed32 = tfixed32;
    this.tfixed64 = tfixed64;
    this.tsfixed32 = tsfixed32;
    this.tsfixed64 = tsfixed64;
    this.tbytes = tbytes;
    this.tbool = tbool;
    this.repInt32 = Internal.immutableCopyOf("repInt32", repInt32);
    this.repUint32 = Internal.immutableCopyOf("repUint32", repUint32);
    this.repSint32 = Internal.immutableCopyOf("repSint32", repSint32);
    this.repFixed32 = Internal.immutableCopyOf("repFixed32", repFixed32);
    this.repSfixed32 = Internal.immutableCopyOf("repSfixed32", repSfixed32);
    this.repInt64 = Internal.immutableCopyOf("repInt64", repInt64);
    this.repUint64 = Internal.immutableCopyOf("repUint64", repUint64);
    this.repSint64 = Internal.immutableCopyOf("repSint64", repSint64);
    this.repFixed64 = Internal.immutableCopyOf("repFixed64", repFixed64);
    this.repSfixed64 = Internal.immutableCopyOf("repSfixed64", repSfixed64);
    this.repBool = Internal.immutableCopyOf("repBool", repBool);
    this.repFloat = Internal.immutableCopyOf("repFloat", repFloat);
    this.repDouble = Internal.immutableCopyOf("repDouble", repDouble);
    this.repString = Internal.immutableCopyOf("repString", repString);
    this.repBytes = Internal.immutableCopyOf("repBytes", repBytes);
    this.repResult = Internal.immutableCopyOf("repResult", repResult);
    this.mapInt32Int32 = Internal.immutableCopyOf("mapInt32Int32", mapInt32Int32);
    this.mapStringString = Internal.immutableCopyOf("mapStringString", mapStringString);
    this.mapStringMessage = Internal.immutableCopyOf("mapStringMessage", mapStringMessage);
    this.mapStringEnum = Internal.immutableCopyOf("mapStringEnum", mapStringEnum);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name=name;
  }

  public Corpus getCorpus() {
    return this.corpus;
  }

  public void setCorpus(Corpus corpus) {
    this.corpus=corpus;
  }

  public List<String> getSnippets() {
    return this.snippets;
  }

  public void setSnippets(List<String> snippets) {
    this.snippets=snippets;
  }

  public List<Cat> getCats() {
    return this.cats;
  }

  public void setCats(List<Cat> cats) {
    this.cats=cats;
  }

  public Result getResult() {
    return this.result;
  }

  public void setResult(Result result) {
    this.result=result;
  }

  public Double getTDouble() {
    return this.tDouble;
  }

  public void setTDouble(Double tDouble) {
    this.tDouble=tDouble;
  }

  public Float getTFloat() {
    return this.tFloat;
  }

  public void setTFloat(Float tFloat) {
    this.tFloat=tFloat;
  }

  public Integer getTint32() {
    return this.tint32;
  }

  public void setTint32(Integer tint32) {
    this.tint32=tint32;
  }

  public Long getTint64() {
    return this.tint64;
  }

  public void setTint64(Long tint64) {
    this.tint64=tint64;
  }

  public Integer getTunit32() {
    return this.tunit32;
  }

  public void setTunit32(Integer tunit32) {
    this.tunit32=tunit32;
  }

  public Long getTunit64() {
    return this.tunit64;
  }

  public void setTunit64(Long tunit64) {
    this.tunit64=tunit64;
  }

  public Integer getTsint32() {
    return this.tsint32;
  }

  public void setTsint32(Integer tsint32) {
    this.tsint32=tsint32;
  }

  public Long getTsint64() {
    return this.tsint64;
  }

  public void setTsint64(Long tsint64) {
    this.tsint64=tsint64;
  }

  public Integer getTfixed32() {
    return this.tfixed32;
  }

  public void setTfixed32(Integer tfixed32) {
    this.tfixed32=tfixed32;
  }

  public Long getTfixed64() {
    return this.tfixed64;
  }

  public void setTfixed64(Long tfixed64) {
    this.tfixed64=tfixed64;
  }

  public Integer getTsfixed32() {
    return this.tsfixed32;
  }

  public void setTsfixed32(Integer tsfixed32) {
    this.tsfixed32=tsfixed32;
  }

  public Long getTsfixed64() {
    return this.tsfixed64;
  }

  public void setTsfixed64(Long tsfixed64) {
    this.tsfixed64=tsfixed64;
  }

  public ByteString getTbytes() {
    return this.tbytes;
  }

  public void setTbytes(ByteString tbytes) {
    this.tbytes=tbytes;
  }

  public Boolean getTbool() {
    return this.tbool;
  }

  public void setTbool(Boolean tbool) {
    this.tbool=tbool;
  }

  public List<Integer> getRepInt32() {
    return this.repInt32;
  }

  public void setRepInt32(List<Integer> repInt32) {
    this.repInt32=repInt32;
  }

  public List<Integer> getRepUint32() {
    return this.repUint32;
  }

  public void setRepUint32(List<Integer> repUint32) {
    this.repUint32=repUint32;
  }

  public List<Integer> getRepSint32() {
    return this.repSint32;
  }

  public void setRepSint32(List<Integer> repSint32) {
    this.repSint32=repSint32;
  }

  public List<Integer> getRepFixed32() {
    return this.repFixed32;
  }

  public void setRepFixed32(List<Integer> repFixed32) {
    this.repFixed32=repFixed32;
  }

  public List<Integer> getRepSfixed32() {
    return this.repSfixed32;
  }

  public void setRepSfixed32(List<Integer> repSfixed32) {
    this.repSfixed32=repSfixed32;
  }

  public List<Long> getRepInt64() {
    return this.repInt64;
  }

  public void setRepInt64(List<Long> repInt64) {
    this.repInt64=repInt64;
  }

  public List<Long> getRepUint64() {
    return this.repUint64;
  }

  public void setRepUint64(List<Long> repUint64) {
    this.repUint64=repUint64;
  }

  public List<Long> getRepSint64() {
    return this.repSint64;
  }

  public void setRepSint64(List<Long> repSint64) {
    this.repSint64=repSint64;
  }

  public List<Long> getRepFixed64() {
    return this.repFixed64;
  }

  public void setRepFixed64(List<Long> repFixed64) {
    this.repFixed64=repFixed64;
  }

  public List<Long> getRepSfixed64() {
    return this.repSfixed64;
  }

  public void setRepSfixed64(List<Long> repSfixed64) {
    this.repSfixed64=repSfixed64;
  }

  public List<Boolean> getRepBool() {
    return this.repBool;
  }

  public void setRepBool(List<Boolean> repBool) {
    this.repBool=repBool;
  }

  public List<Float> getRepFloat() {
    return this.repFloat;
  }

  public void setRepFloat(List<Float> repFloat) {
    this.repFloat=repFloat;
  }

  public List<Double> getRepDouble() {
    return this.repDouble;
  }

  public void setRepDouble(List<Double> repDouble) {
    this.repDouble=repDouble;
  }

  public List<String> getRepString() {
    return this.repString;
  }

  public void setRepString(List<String> repString) {
    this.repString=repString;
  }

  public List<ByteString> getRepBytes() {
    return this.repBytes;
  }

  public void setRepBytes(List<ByteString> repBytes) {
    this.repBytes=repBytes;
  }

  public List<Result> getRepResult() {
    return this.repResult;
  }

  public void setRepResult(List<Result> repResult) {
    this.repResult=repResult;
  }

  public Map<Integer, Integer> getMapInt32Int32() {
    return this.mapInt32Int32;
  }

  public void setMapInt32Int32(Map<Integer, Integer> mapInt32Int32) {
    this.mapInt32Int32=mapInt32Int32;
  }

  public Map<String, String> getMapStringString() {
    return this.mapStringString;
  }

  public void setMapStringString(Map<String, String> mapStringString) {
    this.mapStringString=mapStringString;
  }

  public Map<String, Result> getMapStringMessage() {
    return this.mapStringMessage;
  }

  public void setMapStringMessage(Map<String, Result> mapStringMessage) {
    this.mapStringMessage=mapStringMessage;
  }

  public Map<String, Corpus> getMapStringEnum() {
    return this.mapStringEnum;
  }

  public void setMapStringEnum(Map<String, Corpus> mapStringEnum) {
    this.mapStringEnum=mapStringEnum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.corpus = corpus;
    builder.snippets = Internal.copyOf("snippets", snippets);
    builder.cats = Internal.copyOf("cats", cats);
    builder.result = result;
    builder.tDouble = tDouble;
    builder.tFloat = tFloat;
    builder.tint32 = tint32;
    builder.tint64 = tint64;
    builder.tunit32 = tunit32;
    builder.tunit64 = tunit64;
    builder.tsint32 = tsint32;
    builder.tsint64 = tsint64;
    builder.tfixed32 = tfixed32;
    builder.tfixed64 = tfixed64;
    builder.tsfixed32 = tsfixed32;
    builder.tsfixed64 = tsfixed64;
    builder.tbytes = tbytes;
    builder.tbool = tbool;
    builder.repInt32 = Internal.copyOf("repInt32", repInt32);
    builder.repUint32 = Internal.copyOf("repUint32", repUint32);
    builder.repSint32 = Internal.copyOf("repSint32", repSint32);
    builder.repFixed32 = Internal.copyOf("repFixed32", repFixed32);
    builder.repSfixed32 = Internal.copyOf("repSfixed32", repSfixed32);
    builder.repInt64 = Internal.copyOf("repInt64", repInt64);
    builder.repUint64 = Internal.copyOf("repUint64", repUint64);
    builder.repSint64 = Internal.copyOf("repSint64", repSint64);
    builder.repFixed64 = Internal.copyOf("repFixed64", repFixed64);
    builder.repSfixed64 = Internal.copyOf("repSfixed64", repSfixed64);
    builder.repBool = Internal.copyOf("repBool", repBool);
    builder.repFloat = Internal.copyOf("repFloat", repFloat);
    builder.repDouble = Internal.copyOf("repDouble", repDouble);
    builder.repString = Internal.copyOf("repString", repString);
    builder.repBytes = Internal.copyOf("repBytes", repBytes);
    builder.repResult = Internal.copyOf("repResult", repResult);
    builder.mapInt32Int32 = Internal.copyOf("mapInt32Int32", mapInt32Int32);
    builder.mapStringString = Internal.copyOf("mapStringString", mapStringString);
    builder.mapStringMessage = Internal.copyOf("mapStringMessage", mapStringMessage);
    builder.mapStringEnum = Internal.copyOf("mapStringEnum", mapStringEnum);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HelloRequest)) return false;
    HelloRequest o = (HelloRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(corpus, o.corpus)
        && snippets.equals(o.snippets)
        && cats.equals(o.cats)
        && Internal.equals(result, o.result)
        && Internal.equals(tDouble, o.tDouble)
        && Internal.equals(tFloat, o.tFloat)
        && Internal.equals(tint32, o.tint32)
        && Internal.equals(tint64, o.tint64)
        && Internal.equals(tunit32, o.tunit32)
        && Internal.equals(tunit64, o.tunit64)
        && Internal.equals(tsint32, o.tsint32)
        && Internal.equals(tsint64, o.tsint64)
        && Internal.equals(tfixed32, o.tfixed32)
        && Internal.equals(tfixed64, o.tfixed64)
        && Internal.equals(tsfixed32, o.tsfixed32)
        && Internal.equals(tsfixed64, o.tsfixed64)
        && Internal.equals(tbytes, o.tbytes)
        && Internal.equals(tbool, o.tbool)
        && repInt32.equals(o.repInt32)
        && repUint32.equals(o.repUint32)
        && repSint32.equals(o.repSint32)
        && repFixed32.equals(o.repFixed32)
        && repSfixed32.equals(o.repSfixed32)
        && repInt64.equals(o.repInt64)
        && repUint64.equals(o.repUint64)
        && repSint64.equals(o.repSint64)
        && repFixed64.equals(o.repFixed64)
        && repSfixed64.equals(o.repSfixed64)
        && repBool.equals(o.repBool)
        && repFloat.equals(o.repFloat)
        && repDouble.equals(o.repDouble)
        && repString.equals(o.repString)
        && repBytes.equals(o.repBytes)
        && repResult.equals(o.repResult)
        && mapInt32Int32.equals(o.mapInt32Int32)
        && mapStringString.equals(o.mapStringString)
        && mapStringMessage.equals(o.mapStringMessage)
        && mapStringEnum.equals(o.mapStringEnum);
  }

  @Override
  public int hashCode() {
    int result_ = super.hashCode;
    if (result_ == 0) {
      result_ = unknownFields().hashCode();
      result_ = result_ * 37 + (name != null ? name.hashCode() : 0);
      result_ = result_ * 37 + (corpus != null ? corpus.hashCode() : 0);
      result_ = result_ * 37 + snippets.hashCode();
      result_ = result_ * 37 + cats.hashCode();
      result_ = result_ * 37 + (result != null ? result.hashCode() : 0);
      result_ = result_ * 37 + (tDouble != null ? tDouble.hashCode() : 0);
      result_ = result_ * 37 + (tFloat != null ? tFloat.hashCode() : 0);
      result_ = result_ * 37 + (tint32 != null ? tint32.hashCode() : 0);
      result_ = result_ * 37 + (tint64 != null ? tint64.hashCode() : 0);
      result_ = result_ * 37 + (tunit32 != null ? tunit32.hashCode() : 0);
      result_ = result_ * 37 + (tunit64 != null ? tunit64.hashCode() : 0);
      result_ = result_ * 37 + (tsint32 != null ? tsint32.hashCode() : 0);
      result_ = result_ * 37 + (tsint64 != null ? tsint64.hashCode() : 0);
      result_ = result_ * 37 + (tfixed32 != null ? tfixed32.hashCode() : 0);
      result_ = result_ * 37 + (tfixed64 != null ? tfixed64.hashCode() : 0);
      result_ = result_ * 37 + (tsfixed32 != null ? tsfixed32.hashCode() : 0);
      result_ = result_ * 37 + (tsfixed64 != null ? tsfixed64.hashCode() : 0);
      result_ = result_ * 37 + (tbytes != null ? tbytes.hashCode() : 0);
      result_ = result_ * 37 + (tbool != null ? tbool.hashCode() : 0);
      result_ = result_ * 37 + repInt32.hashCode();
      result_ = result_ * 37 + repUint32.hashCode();
      result_ = result_ * 37 + repSint32.hashCode();
      result_ = result_ * 37 + repFixed32.hashCode();
      result_ = result_ * 37 + repSfixed32.hashCode();
      result_ = result_ * 37 + repInt64.hashCode();
      result_ = result_ * 37 + repUint64.hashCode();
      result_ = result_ * 37 + repSint64.hashCode();
      result_ = result_ * 37 + repFixed64.hashCode();
      result_ = result_ * 37 + repSfixed64.hashCode();
      result_ = result_ * 37 + repBool.hashCode();
      result_ = result_ * 37 + repFloat.hashCode();
      result_ = result_ * 37 + repDouble.hashCode();
      result_ = result_ * 37 + repString.hashCode();
      result_ = result_ * 37 + repBytes.hashCode();
      result_ = result_ * 37 + repResult.hashCode();
      result_ = result_ * 37 + mapInt32Int32.hashCode();
      result_ = result_ * 37 + mapStringString.hashCode();
      result_ = result_ * 37 + mapStringMessage.hashCode();
      result_ = result_ * 37 + mapStringEnum.hashCode();
      super.hashCode = result_;
    }
    return result_;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (corpus != null) builder.append(", corpus=").append(corpus);
    if (!snippets.isEmpty()) builder.append(", snippets=").append(snippets);
    if (!cats.isEmpty()) builder.append(", cats=").append(cats);
    if (result != null) builder.append(", result=").append(result);
    if (tDouble != null) builder.append(", tDouble=").append(tDouble);
    if (tFloat != null) builder.append(", tFloat=").append(tFloat);
    if (tint32 != null) builder.append(", tint32=").append(tint32);
    if (tint64 != null) builder.append(", tint64=").append(tint64);
    if (tunit32 != null) builder.append(", tunit32=").append(tunit32);
    if (tunit64 != null) builder.append(", tunit64=").append(tunit64);
    if (tsint32 != null) builder.append(", tsint32=").append(tsint32);
    if (tsint64 != null) builder.append(", tsint64=").append(tsint64);
    if (tfixed32 != null) builder.append(", tfixed32=").append(tfixed32);
    if (tfixed64 != null) builder.append(", tfixed64=").append(tfixed64);
    if (tsfixed32 != null) builder.append(", tsfixed32=").append(tsfixed32);
    if (tsfixed64 != null) builder.append(", tsfixed64=").append(tsfixed64);
    if (tbytes != null) builder.append(", tbytes=").append(tbytes);
    if (tbool != null) builder.append(", tbool=").append(tbool);
    if (!repInt32.isEmpty()) builder.append(", rep_int32=").append(repInt32);
    if (!repUint32.isEmpty()) builder.append(", rep_uint32=").append(repUint32);
    if (!repSint32.isEmpty()) builder.append(", rep_sint32=").append(repSint32);
    if (!repFixed32.isEmpty()) builder.append(", rep_fixed32=").append(repFixed32);
    if (!repSfixed32.isEmpty()) builder.append(", rep_sfixed32=").append(repSfixed32);
    if (!repInt64.isEmpty()) builder.append(", rep_int64=").append(repInt64);
    if (!repUint64.isEmpty()) builder.append(", rep_uint64=").append(repUint64);
    if (!repSint64.isEmpty()) builder.append(", rep_sint64=").append(repSint64);
    if (!repFixed64.isEmpty()) builder.append(", rep_fixed64=").append(repFixed64);
    if (!repSfixed64.isEmpty()) builder.append(", rep_sfixed64=").append(repSfixed64);
    if (!repBool.isEmpty()) builder.append(", rep_bool=").append(repBool);
    if (!repFloat.isEmpty()) builder.append(", rep_float=").append(repFloat);
    if (!repDouble.isEmpty()) builder.append(", rep_double=").append(repDouble);
    if (!repString.isEmpty()) builder.append(", rep_string=").append(repString);
    if (!repBytes.isEmpty()) builder.append(", rep_bytes=").append(repBytes);
    if (!repResult.isEmpty()) builder.append(", rep_Result=").append(repResult);
    if (!mapInt32Int32.isEmpty()) builder.append(", map_int32_int32=").append(mapInt32Int32);
    if (!mapStringString.isEmpty()) builder.append(", map_string_string=").append(mapStringString);
    if (!mapStringMessage.isEmpty()) builder.append(", map_string_message=").append(mapStringMessage);
    if (!mapStringEnum.isEmpty()) builder.append(", map_string_enum=").append(mapStringEnum);
    return builder.replace(0, 2, "HelloRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HelloRequest, Builder> {
    public String name;

    public Corpus corpus;

    public List<String> snippets;

    public List<Cat> cats;

    public Result result;

    public Double tDouble;

    public Float tFloat;

    public Integer tint32;

    public Long tint64;

    public Integer tunit32;

    public Long tunit64;

    public Integer tsint32;

    public Long tsint64;

    public Integer tfixed32;

    public Long tfixed64;

    public Integer tsfixed32;

    public Long tsfixed64;

    public ByteString tbytes;

    public Boolean tbool;

    public List<Integer> repInt32;

    public List<Integer> repUint32;

    public List<Integer> repSint32;

    public List<Integer> repFixed32;

    public List<Integer> repSfixed32;

    public List<Long> repInt64;

    public List<Long> repUint64;

    public List<Long> repSint64;

    public List<Long> repFixed64;

    public List<Long> repSfixed64;

    public List<Boolean> repBool;

    public List<Float> repFloat;

    public List<Double> repDouble;

    public List<String> repString;

    public List<ByteString> repBytes;

    public List<Result> repResult;

    public Map<Integer, Integer> mapInt32Int32;

    public Map<String, String> mapStringString;

    public Map<String, Result> mapStringMessage;

    public Map<String, Corpus> mapStringEnum;

    public Builder() {
      snippets = Internal.newMutableList();
      cats = Internal.newMutableList();
      repInt32 = Internal.newMutableList();
      repUint32 = Internal.newMutableList();
      repSint32 = Internal.newMutableList();
      repFixed32 = Internal.newMutableList();
      repSfixed32 = Internal.newMutableList();
      repInt64 = Internal.newMutableList();
      repUint64 = Internal.newMutableList();
      repSint64 = Internal.newMutableList();
      repFixed64 = Internal.newMutableList();
      repSfixed64 = Internal.newMutableList();
      repBool = Internal.newMutableList();
      repFloat = Internal.newMutableList();
      repDouble = Internal.newMutableList();
      repString = Internal.newMutableList();
      repBytes = Internal.newMutableList();
      repResult = Internal.newMutableList();
      mapInt32Int32 = Internal.newMutableMap();
      mapStringString = Internal.newMutableMap();
      mapStringMessage = Internal.newMutableMap();
      mapStringEnum = Internal.newMutableMap();
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder corpus(Corpus corpus) {
      this.corpus = corpus;
      return this;
    }

    public Builder snippets(List<String> snippets) {
      Internal.checkElementsNotNull(snippets);
      this.snippets = snippets;
      return this;
    }

    public Builder cats(List<Cat> cats) {
      Internal.checkElementsNotNull(cats);
      this.cats = cats;
      return this;
    }

    public Builder result(Result result) {
      this.result = result;
      return this;
    }

    public Builder tDouble(Double tDouble) {
      this.tDouble = tDouble;
      return this;
    }

    public Builder tFloat(Float tFloat) {
      this.tFloat = tFloat;
      return this;
    }

    public Builder tint32(Integer tint32) {
      this.tint32 = tint32;
      return this;
    }

    public Builder tint64(Long tint64) {
      this.tint64 = tint64;
      return this;
    }

    public Builder tunit32(Integer tunit32) {
      this.tunit32 = tunit32;
      return this;
    }

    public Builder tunit64(Long tunit64) {
      this.tunit64 = tunit64;
      return this;
    }

    public Builder tsint32(Integer tsint32) {
      this.tsint32 = tsint32;
      return this;
    }

    public Builder tsint64(Long tsint64) {
      this.tsint64 = tsint64;
      return this;
    }

    public Builder tfixed32(Integer tfixed32) {
      this.tfixed32 = tfixed32;
      return this;
    }

    public Builder tfixed64(Long tfixed64) {
      this.tfixed64 = tfixed64;
      return this;
    }

    public Builder tsfixed32(Integer tsfixed32) {
      this.tsfixed32 = tsfixed32;
      return this;
    }

    public Builder tsfixed64(Long tsfixed64) {
      this.tsfixed64 = tsfixed64;
      return this;
    }

    public Builder tbytes(ByteString tbytes) {
      this.tbytes = tbytes;
      return this;
    }

    public Builder tbool(Boolean tbool) {
      this.tbool = tbool;
      return this;
    }

    public Builder repInt32(List<Integer> repInt32) {
      Internal.checkElementsNotNull(repInt32);
      this.repInt32 = repInt32;
      return this;
    }

    public Builder repUint32(List<Integer> repUint32) {
      Internal.checkElementsNotNull(repUint32);
      this.repUint32 = repUint32;
      return this;
    }

    public Builder repSint32(List<Integer> repSint32) {
      Internal.checkElementsNotNull(repSint32);
      this.repSint32 = repSint32;
      return this;
    }

    public Builder repFixed32(List<Integer> repFixed32) {
      Internal.checkElementsNotNull(repFixed32);
      this.repFixed32 = repFixed32;
      return this;
    }

    public Builder repSfixed32(List<Integer> repSfixed32) {
      Internal.checkElementsNotNull(repSfixed32);
      this.repSfixed32 = repSfixed32;
      return this;
    }

    public Builder repInt64(List<Long> repInt64) {
      Internal.checkElementsNotNull(repInt64);
      this.repInt64 = repInt64;
      return this;
    }

    public Builder repUint64(List<Long> repUint64) {
      Internal.checkElementsNotNull(repUint64);
      this.repUint64 = repUint64;
      return this;
    }

    public Builder repSint64(List<Long> repSint64) {
      Internal.checkElementsNotNull(repSint64);
      this.repSint64 = repSint64;
      return this;
    }

    public Builder repFixed64(List<Long> repFixed64) {
      Internal.checkElementsNotNull(repFixed64);
      this.repFixed64 = repFixed64;
      return this;
    }

    public Builder repSfixed64(List<Long> repSfixed64) {
      Internal.checkElementsNotNull(repSfixed64);
      this.repSfixed64 = repSfixed64;
      return this;
    }

    public Builder repBool(List<Boolean> repBool) {
      Internal.checkElementsNotNull(repBool);
      this.repBool = repBool;
      return this;
    }

    public Builder repFloat(List<Float> repFloat) {
      Internal.checkElementsNotNull(repFloat);
      this.repFloat = repFloat;
      return this;
    }

    public Builder repDouble(List<Double> repDouble) {
      Internal.checkElementsNotNull(repDouble);
      this.repDouble = repDouble;
      return this;
    }

    public Builder repString(List<String> repString) {
      Internal.checkElementsNotNull(repString);
      this.repString = repString;
      return this;
    }

    public Builder repBytes(List<ByteString> repBytes) {
      Internal.checkElementsNotNull(repBytes);
      this.repBytes = repBytes;
      return this;
    }

    public Builder repResult(List<Result> repResult) {
      Internal.checkElementsNotNull(repResult);
      this.repResult = repResult;
      return this;
    }

    public Builder mapInt32Int32(Map<Integer, Integer> mapInt32Int32) {
      Internal.checkElementsNotNull(mapInt32Int32);
      this.mapInt32Int32 = mapInt32Int32;
      return this;
    }

    public Builder mapStringString(Map<String, String> mapStringString) {
      Internal.checkElementsNotNull(mapStringString);
      this.mapStringString = mapStringString;
      return this;
    }

    public Builder mapStringMessage(Map<String, Result> mapStringMessage) {
      Internal.checkElementsNotNull(mapStringMessage);
      this.mapStringMessage = mapStringMessage;
      return this;
    }

    public Builder mapStringEnum(Map<String, Corpus> mapStringEnum) {
      Internal.checkElementsNotNull(mapStringEnum);
      this.mapStringEnum = mapStringEnum;
      return this;
    }

    @Override
    public HelloRequest build() {
      return new HelloRequest(name, corpus, snippets, cats, result, tDouble, tFloat, tint32, tint64, tunit32, tunit64, tsint32, tsint64, tfixed32, tfixed64, tsfixed32, tsfixed64, tbytes, tbool, repInt32, repUint32, repSint32, repFixed32, repSfixed32, repInt64, repUint64, repSint64, repFixed64, repSfixed64, repBool, repFloat, repDouble, repString, repBytes, repResult, mapInt32Int32, mapStringString, mapStringMessage, mapStringEnum, super.buildUnknownFields());
    }
  }

  public enum Corpus implements WireEnum {
    UNIVERSAL(0),

    WEB(1),

    IMAGES(2),

    LOCAL(3),

    NEWS(4),

    PRODUCTS(5),

    VIDEO(6);

    public static final ProtoAdapter<Corpus> ADAPTER = new ProtoAdapter_Corpus();

    private final int value;

    Corpus(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Corpus fromValue(int value) {
      switch (value) {
        case 0: return UNIVERSAL;
        case 1: return WEB;
        case 2: return IMAGES;
        case 3: return LOCAL;
        case 4: return NEWS;
        case 5: return PRODUCTS;
        case 6: return VIDEO;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }

    private static final class ProtoAdapter_Corpus extends EnumAdapter<Corpus> {
      ProtoAdapter_Corpus() {
        super(Corpus.class);
      }

      @Override
      protected Corpus fromValue(int value) {
        return Corpus.fromValue(value);
      }
    }
  }

  @RaptorMessage(
      version = "version.0.1",
      protoFile = "helloworld"
  )
  public static final class Result extends Message<Result, Result.Builder> {
    public static final ProtoAdapter<Result> ADAPTER = new ProtoAdapter_Result();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_URL = "";

    public static final Corpus DEFAULT_CORPUS = Corpus.UNIVERSAL;

    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    private String url;

    @WireField(
        tag = 2,
        adapter = "com.ppdai.framework.raptor.proto.HelloRequest$Result$Corpus#ADAPTER"
    )
    private Corpus corpus;

    public Result() {
      super(ADAPTER, ByteString.EMPTY);
    }

    public Result(String url, Corpus corpus) {
      this(url, corpus, ByteString.EMPTY);
    }

    public Result(String url, Corpus corpus, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.url = url;
      this.corpus = corpus;
    }

    public String getUrl() {
      return this.url;
    }

    public void setUrl(String url) {
      this.url=url;
    }

    public Corpus getCorpus() {
      return this.corpus;
    }

    public void setCorpus(Corpus corpus) {
      this.corpus=corpus;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.url = url;
      builder.corpus = corpus;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Result)) return false;
      Result o = (Result) other;
      return unknownFields().equals(o.unknownFields())
          && Internal.equals(url, o.url)
          && Internal.equals(corpus, o.corpus);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (url != null ? url.hashCode() : 0);
        result = result * 37 + (corpus != null ? corpus.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (url != null) builder.append(", url=").append(url);
      if (corpus != null) builder.append(", corpus=").append(corpus);
      return builder.replace(0, 2, "Result{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Result, Builder> {
      public String url;

      public Corpus corpus;

      public Builder() {
      }

      public Builder url(String url) {
        this.url = url;
        return this;
      }

      public Builder corpus(Corpus corpus) {
        this.corpus = corpus;
        return this;
      }

      @Override
      public Result build() {
        return new Result(url, corpus, super.buildUnknownFields());
      }
    }

    public enum Corpus implements WireEnum {
      UNIVERSAL(0),

      WEB(1),

      IMAGES(2),

      LOCAL(3),

      NEWS(4),

      PRODUCTS(5),

      VIDEO(6);

      public static final ProtoAdapter<Corpus> ADAPTER = new ProtoAdapter_Corpus();

      private final int value;

      Corpus(int value) {
        this.value = value;
      }

      /**
       * Return the constant for {@code value} or null.
       */
      public static Corpus fromValue(int value) {
        switch (value) {
          case 0: return UNIVERSAL;
          case 1: return WEB;
          case 2: return IMAGES;
          case 3: return LOCAL;
          case 4: return NEWS;
          case 5: return PRODUCTS;
          case 6: return VIDEO;
          default: return null;
        }
      }

      @Override
      public int getValue() {
        return value;
      }

      private static final class ProtoAdapter_Corpus extends EnumAdapter<Corpus> {
        ProtoAdapter_Corpus() {
          super(Corpus.class);
        }

        @Override
        protected Corpus fromValue(int value) {
          return Corpus.fromValue(value);
        }
      }
    }

    private static final class ProtoAdapter_Result extends ProtoAdapter<Result> {
      public ProtoAdapter_Result() {
        super(FieldEncoding.LENGTH_DELIMITED, Result.class);
      }

      @Override
      public int encodedSize(Result value) {
        return ProtoAdapter.STRING.encodedSizeWithTag(1, value.url)
            + Corpus.ADAPTER.encodedSizeWithTag(2, value.corpus)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Result value) throws IOException {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url);
        Corpus.ADAPTER.encodeWithTag(writer, 2, value.corpus);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Result decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.url(ProtoAdapter.STRING.decode(reader)); break;
            case 2: {
              try {
                builder.corpus(Corpus.ADAPTER.decode(reader));
              } catch (EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Result redact(Result value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_HelloRequest extends ProtoAdapter<HelloRequest> {
    private final ProtoAdapter<Map<Integer, Integer>> map_int32_int32 = ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32);

    private final ProtoAdapter<Map<String, String>> map_string_string = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    private final ProtoAdapter<Map<String, Result>> map_string_message = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, Result.ADAPTER);

    private final ProtoAdapter<Map<String, Corpus>> map_string_enum = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, Corpus.ADAPTER);

    public ProtoAdapter_HelloRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, HelloRequest.class);
    }

    @Override
    public int encodedSize(HelloRequest value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          + Corpus.ADAPTER.encodedSizeWithTag(2, value.corpus)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.snippets)
          + Cat.ADAPTER.asRepeated().encodedSizeWithTag(4, value.cats)
          + Result.ADAPTER.encodedSizeWithTag(5, value.result)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(6, value.tDouble)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.tFloat)
          + ProtoAdapter.INT32.encodedSizeWithTag(8, value.tint32)
          + ProtoAdapter.INT64.encodedSizeWithTag(9, value.tint64)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.tunit32)
          + ProtoAdapter.UINT64.encodedSizeWithTag(11, value.tunit64)
          + ProtoAdapter.SINT32.encodedSizeWithTag(12, value.tsint32)
          + ProtoAdapter.SINT64.encodedSizeWithTag(13, value.tsint64)
          + ProtoAdapter.FIXED32.encodedSizeWithTag(14, value.tfixed32)
          + ProtoAdapter.FIXED64.encodedSizeWithTag(15, value.tfixed64)
          + ProtoAdapter.SFIXED32.encodedSizeWithTag(16, value.tsfixed32)
          + ProtoAdapter.SFIXED64.encodedSizeWithTag(17, value.tsfixed64)
          + ProtoAdapter.BYTES.encodedSizeWithTag(18, value.tbytes)
          + ProtoAdapter.BOOL.encodedSizeWithTag(19, value.tbool)
          + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.repInt32)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.repUint32)
          + ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.repSint32)
          + ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.repFixed32)
          + ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.repSfixed32)
          + ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.repInt64)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.repUint64)
          + ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.repSint64)
          + ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.repFixed64)
          + ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.repSfixed64)
          + ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.repBool)
          + ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.repFloat)
          + ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.repDouble)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.repString)
          + ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.repBytes)
          + Result.ADAPTER.asRepeated().encodedSizeWithTag(216, value.repResult)
          + map_int32_int32.encodedSizeWithTag(501, value.mapInt32Int32)
          + map_string_string.encodedSizeWithTag(502, value.mapStringString)
          + map_string_message.encodedSizeWithTag(503, value.mapStringMessage)
          + map_string_enum.encodedSizeWithTag(504, value.mapStringEnum)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HelloRequest value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      Corpus.ADAPTER.encodeWithTag(writer, 2, value.corpus);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.snippets);
      Cat.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.cats);
      Result.ADAPTER.encodeWithTag(writer, 5, value.result);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 6, value.tDouble);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.tFloat);
      ProtoAdapter.INT32.encodeWithTag(writer, 8, value.tint32);
      ProtoAdapter.INT64.encodeWithTag(writer, 9, value.tint64);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.tunit32);
      ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.tunit64);
      ProtoAdapter.SINT32.encodeWithTag(writer, 12, value.tsint32);
      ProtoAdapter.SINT64.encodeWithTag(writer, 13, value.tsint64);
      ProtoAdapter.FIXED32.encodeWithTag(writer, 14, value.tfixed32);
      ProtoAdapter.FIXED64.encodeWithTag(writer, 15, value.tfixed64);
      ProtoAdapter.SFIXED32.encodeWithTag(writer, 16, value.tsfixed32);
      ProtoAdapter.SFIXED64.encodeWithTag(writer, 17, value.tsfixed64);
      ProtoAdapter.BYTES.encodeWithTag(writer, 18, value.tbytes);
      ProtoAdapter.BOOL.encodeWithTag(writer, 19, value.tbool);
      ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.repInt32);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.repUint32);
      ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.repSint32);
      ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.repFixed32);
      ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.repSfixed32);
      ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.repInt64);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.repUint64);
      ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.repSint64);
      ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.repFixed64);
      ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.repSfixed64);
      ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.repBool);
      ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.repFloat);
      ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.repDouble);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.repString);
      ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.repBytes);
      Result.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.repResult);
      map_int32_int32.encodeWithTag(writer, 501, value.mapInt32Int32);
      map_string_string.encodeWithTag(writer, 502, value.mapStringString);
      map_string_message.encodeWithTag(writer, 503, value.mapStringMessage);
      map_string_enum.encodeWithTag(writer, 504, value.mapStringEnum);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HelloRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.corpus(Corpus.ADAPTER.decode(reader));
            } catch (EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.snippets.add(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.cats.add(Cat.ADAPTER.decode(reader)); break;
          case 5: builder.result(Result.ADAPTER.decode(reader)); break;
          case 6: builder.tDouble(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 7: builder.tFloat(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.tint32(ProtoAdapter.INT32.decode(reader)); break;
          case 9: builder.tint64(ProtoAdapter.INT64.decode(reader)); break;
          case 10: builder.tunit32(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.tunit64(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.tsint32(ProtoAdapter.SINT32.decode(reader)); break;
          case 13: builder.tsint64(ProtoAdapter.SINT64.decode(reader)); break;
          case 14: builder.tfixed32(ProtoAdapter.FIXED32.decode(reader)); break;
          case 15: builder.tfixed64(ProtoAdapter.FIXED64.decode(reader)); break;
          case 16: builder.tsfixed32(ProtoAdapter.SFIXED32.decode(reader)); break;
          case 17: builder.tsfixed64(ProtoAdapter.SFIXED64.decode(reader)); break;
          case 18: builder.tbytes(ProtoAdapter.BYTES.decode(reader)); break;
          case 19: builder.tbool(ProtoAdapter.BOOL.decode(reader)); break;
          case 201: builder.repInt32.add(ProtoAdapter.INT32.decode(reader)); break;
          case 202: builder.repUint32.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 203: builder.repSint32.add(ProtoAdapter.SINT32.decode(reader)); break;
          case 204: builder.repFixed32.add(ProtoAdapter.FIXED32.decode(reader)); break;
          case 205: builder.repSfixed32.add(ProtoAdapter.SFIXED32.decode(reader)); break;
          case 206: builder.repInt64.add(ProtoAdapter.INT64.decode(reader)); break;
          case 207: builder.repUint64.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 208: builder.repSint64.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 209: builder.repFixed64.add(ProtoAdapter.FIXED64.decode(reader)); break;
          case 210: builder.repSfixed64.add(ProtoAdapter.SFIXED64.decode(reader)); break;
          case 211: builder.repBool.add(ProtoAdapter.BOOL.decode(reader)); break;
          case 212: builder.repFloat.add(ProtoAdapter.FLOAT.decode(reader)); break;
          case 213: builder.repDouble.add(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 214: builder.repString.add(ProtoAdapter.STRING.decode(reader)); break;
          case 215: builder.repBytes.add(ProtoAdapter.BYTES.decode(reader)); break;
          case 216: builder.repResult.add(Result.ADAPTER.decode(reader)); break;
          case 501: builder.mapInt32Int32.putAll(map_int32_int32.decode(reader)); break;
          case 502: builder.mapStringString.putAll(map_string_string.decode(reader)); break;
          case 503: builder.mapStringMessage.putAll(map_string_message.decode(reader)); break;
          case 504: builder.mapStringEnum.putAll(map_string_enum.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HelloRequest redact(HelloRequest value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.cats, Cat.ADAPTER);
      if (builder.result != null) builder.result = Result.ADAPTER.redact(builder.result);
      Internal.redactElements(builder.repResult, Result.ADAPTER);
      Internal.redactElements(builder.mapStringMessage, Result.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
