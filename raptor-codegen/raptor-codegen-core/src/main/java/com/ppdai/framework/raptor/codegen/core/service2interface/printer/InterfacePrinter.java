package com.ppdai.framework.raptor.codegen.core.service2interface.printer;

import com.google.common.collect.Lists;
import com.ppdai.framework.raptor.codegen.core.swagger.container.MetaContainer;
import com.ppdai.framework.raptor.codegen.core.swagger.type.MessageType;
import com.ppdai.framework.raptor.codegen.core.swagger.type.MethodType;
import com.ppdai.framework.raptor.codegen.core.swagger.type.ServiceType;

import java.util.List;
import java.util.Map;

public final class InterfacePrinter extends AbstractPrint {

    private ServiceType serviceType;
    private MetaContainer metaContainer;

    public InterfacePrinter(String fileRootPath, String sourcePackageName, String className) {
        super(fileRootPath, sourcePackageName, className);
    }

    public void setServiceType(ServiceType serviceType) {
        this.serviceType = serviceType;
    }

    public void setMetaContainer(MetaContainer metaContainer) {
        this.metaContainer = metaContainer;
    }

    @Override
    protected List<String> collectFileData() {
        String className = super.getClassName();
        String packageName = super.getSourcePackageName().toLowerCase();
        List<String> fileData = Lists.newArrayList("// Generated by the raptor-codegen .  DO NOT EDIT!");
        if (!("".equals(packageName))) {
            fileData.add("package " + packageName + ";");
        }
        fileData.add("");

        fileData.add("import com.ppdai.framework.raptor.annotation.RaptorInterface;");
        fileData.add("");
        fileData.add("@RaptorInterface");
        fileData.add("public interface " + className + "{");
        for (Map.Entry<String, MethodType> nameMethodEntry : serviceType.getMethods().entrySet()) {
            MethodType method = nameMethodEntry.getValue();
            String outPutType = metaContainer.findMessageTypeByFQPN(method.getOutputType()).getFQCN();
            String inPutType = metaContainer.findMessageTypeByFQPN(method.getInputType()).getFQCN();
            String methodName = method.getName();
            String inputValue = "param";
            String methodStr = generateMethod(inPutType, outPutType, methodName, inputValue);
            fileData.add(methodStr);
        }
        fileData.add("}");
        return fileData;
    }

    private String getFQCN(String type) {
        return type;
    }


    private String generateMethod(String inPutType, String outPutType,
                                  String methodName, String inputValue) {
        String methodStr =
                "   " + outPutType + " " + methodName + "(" + inPutType + " " + inputValue + ");";
        return methodStr;
    }


}
